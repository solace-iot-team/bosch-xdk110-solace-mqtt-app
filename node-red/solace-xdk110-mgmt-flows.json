[
    {
        "id": "475cded7.6c736",
        "type": "tab",
        "label": "Settings",
        "disabled": false,
        "info": ""
    },
    {
        "id": "81b16b1.5822198",
        "type": "tab",
        "label": "Device Commands",
        "disabled": false,
        "info": ""
    },
    {
        "id": "af56b18b.09c5c",
        "type": "tab",
        "label": "DeviceState",
        "disabled": false,
        "info": ""
    },
    {
        "id": "732e6ace.9ebb04",
        "type": "tab",
        "label": "DeviceConfig",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c50bcf9b.51248",
        "type": "tab",
        "label": "Broker Control",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a307a629.5ef888",
        "type": "tab",
        "label": "DeviceMonitor",
        "disabled": false,
        "info": ""
    },
    {
        "id": "99ad3953.c28978",
        "type": "tab",
        "label": "Test",
        "disabled": false,
        "info": ""
    },
    {
        "id": "254a06be.b756fa",
        "type": "tab",
        "label": "test event log",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b661b75c.e7b738",
        "type": "tab",
        "label": "About",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a4f1afb7.f81b3",
        "type": "ui_tab",
        "z": "",
        "name": "Device Commands",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ad119746.2f1168",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "SolaceTheme",
                "default": "#4B7930",
                "baseColor": "#72b94b",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#72b94b",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#72b94b",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#9dce82",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#72b94b",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Solace XDK110 App Management",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "true",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "37eb2781.28f6c8",
        "type": "ui_tab",
        "z": "",
        "name": "Device Config",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "64aeb854.85ddf8",
        "type": "ui_group",
        "z": "",
        "name": "Status Config",
        "tab": "37eb2781.28f6c8",
        "order": 5,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "121b4eba.b76d41",
        "type": "ui_group",
        "z": "",
        "name": "log",
        "tab": "12371120.5d34ef",
        "order": 2,
        "disp": true,
        "width": "16",
        "collapse": false
    },
    {
        "id": "593d368e.5a32a8",
        "type": "ui_tab",
        "z": "",
        "name": "Settings",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d6498160.c8849",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "fdcd7900.20fe98",
        "type": "ui_tab",
        "z": "",
        "name": "Device Monitor",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "829376d8.fa27e8",
        "type": "ui_group",
        "z": "",
        "name": "Status Msg Log",
        "tab": "fdcd7900.20fe98",
        "order": 5,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "6ea3246c.102bec",
        "type": "ui_tab",
        "z": "",
        "name": "Test",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "66acec59.eb0f14",
        "type": "ui_group",
        "z": "",
        "name": "Test",
        "tab": "6ea3246c.102bec",
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "62bac859.25e008",
        "type": "mqtt-broker",
        "z": "",
        "name": "XDK-DEV",
        "broker": "$(MQTT_BROKER_HOST)",
        "port": "$(MQTT_BROKER_PORT)",
        "clientid": "NODE_RED_MGMT_APP",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": false,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "8ee14afa.96dc08",
        "type": "ui_group",
        "z": "81b16b1.5822198",
        "name": "Commands",
        "tab": "a4f1afb7.f81b3",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ab9ffc37.e23ab",
        "type": "ui_group",
        "z": "",
        "name": "Current Settings",
        "tab": "593d368e.5a32a8",
        "disp": true,
        "width": "7",
        "collapse": false
    },
    {
        "id": "c3b5e796.9436e8",
        "type": "ui_tab",
        "z": "",
        "name": "About",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a449e70c.3c11a8",
        "type": "ui_group",
        "z": "",
        "name": "About",
        "tab": "c3b5e796.9436e8",
        "order": 1,
        "disp": true,
        "width": "13",
        "collapse": false
    },
    {
        "id": "12371120.5d34ef",
        "type": "ui_tab",
        "z": "",
        "name": "scratch",
        "icon": "dashboard",
        "order": 8,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f8633bdf.aeb048",
        "type": "ui_group",
        "z": "",
        "name": "Response Log",
        "tab": "a4f1afb7.f81b3",
        "order": 4,
        "disp": true,
        "width": "15",
        "collapse": true
    },
    {
        "id": "41630de2.7aac44",
        "type": "ui_tab",
        "z": "",
        "name": "Broker Control",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f01c636a.94e78",
        "type": "ui_group",
        "z": "",
        "name": "Device Session Control",
        "tab": "41630de2.7aac44",
        "disp": true,
        "width": "7",
        "collapse": false
    },
    {
        "id": "69ec3d8.d239dc4",
        "type": "ui_group",
        "z": "",
        "name": "Response Status",
        "tab": "37eb2781.28f6c8",
        "order": 2,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "1f069aa7.efcc35",
        "type": "ui_group",
        "z": "",
        "name": "Command Sent",
        "tab": "a4f1afb7.f81b3",
        "order": 2,
        "disp": true,
        "width": "15",
        "collapse": false
    },
    {
        "id": "ccfcd7dc.ac14a8",
        "type": "ui_group",
        "z": "",
        "name": "Barcode",
        "tab": "30a7471b.f24d88",
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "30a7471b.f24d88",
        "type": "ui_tab",
        "z": "",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 9
    },
    {
        "id": "855228ad.eacff8",
        "type": "ui_group",
        "z": "",
        "name": "Status Msg Log (and scheduled ones?)",
        "tab": "a4f1afb7.f81b3",
        "order": 5,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "cf742316.07462",
        "type": "ui_group",
        "z": "",
        "name": "Buttons",
        "tab": "fdcd7900.20fe98",
        "order": 4,
        "disp": false,
        "width": "21",
        "collapse": false
    },
    {
        "id": "9e7c4b18.47fdf8",
        "type": "ui_group",
        "z": "",
        "name": "Response Msg Log",
        "tab": "fdcd7900.20fe98",
        "order": 6,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "24a3db02.501974",
        "type": "ui_group",
        "z": "",
        "name": "Stats",
        "tab": "fdcd7900.20fe98",
        "order": 2,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "19bb0d97.077502",
        "type": "ui_group",
        "z": "",
        "name": "State",
        "tab": "fdcd7900.20fe98",
        "order": 1,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "fbe688ce.9f8fb8",
        "type": "ui_group",
        "z": "",
        "name": "Telemetry Config",
        "tab": "37eb2781.28f6c8",
        "order": 6,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "ede2c094.95dbd",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "64aeb854.85ddf8",
        "order": 8,
        "width": "14",
        "height": 1
    },
    {
        "id": "a21a4aca.ac5b38",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "64aeb854.85ddf8",
        "order": 2,
        "width": "14",
        "height": 1
    },
    {
        "id": "979cbe9.a92274",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "64aeb854.85ddf8",
        "order": 4,
        "width": "14",
        "height": 1
    },
    {
        "id": "663366ac.400278",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "64aeb854.85ddf8",
        "order": 6,
        "width": "14",
        "height": 1
    },
    {
        "id": "d64a9e3e.85716",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "64aeb854.85ddf8",
        "order": 10,
        "width": "14",
        "height": 1
    },
    {
        "id": "8557d3f1.efcac",
        "type": "ui_group",
        "z": "",
        "name": "Configuration Sent",
        "tab": "37eb2781.28f6c8",
        "order": 1,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "897e460.b057bb8",
        "type": "ui_group",
        "z": "",
        "name": "Response Status",
        "tab": "a4f1afb7.f81b3",
        "order": 3,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "5c4c88c5.f14fb8",
        "type": "ui_group",
        "z": "",
        "name": "Response Log",
        "tab": "37eb2781.28f6c8",
        "order": 3,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "c43aa043.ae983",
        "type": "ui_group",
        "z": "",
        "name": "Status Msg Log (what happens with scheduled ones?)",
        "tab": "37eb2781.28f6c8",
        "order": 4,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "20ae59d9.885f86",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 2,
        "width": "14",
        "height": 1
    },
    {
        "id": "1d704910.48c9e7",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 4,
        "width": "14",
        "height": 1
    },
    {
        "id": "64f0f988.765608",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 6,
        "width": "14",
        "height": 1
    },
    {
        "id": "bd2af989.97c0b8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 8,
        "width": "14",
        "height": 1
    },
    {
        "id": "6f6ee107.dfc2a",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 10,
        "width": "14",
        "height": 1
    },
    {
        "id": "770f1c0e.0fb904",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 12,
        "width": "14",
        "height": 1
    },
    {
        "id": "47727c58.1de504",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 15,
        "width": "14",
        "height": 1
    },
    {
        "id": "48c789a5.51c988",
        "type": "ui_group",
        "z": "",
        "name": "topic and broker configs",
        "tab": "37eb2781.28f6c8",
        "order": 7,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "fc8a0439.ab4d28",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 17,
        "width": "14",
        "height": 1
    },
    {
        "id": "cc6753eb.d0f5c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 19,
        "width": "14",
        "height": 1
    },
    {
        "id": "8fbc39ce.f454c8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 21,
        "width": "14",
        "height": 1
    },
    {
        "id": "43f5f0a4.72d2d",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "fbe688ce.9f8fb8",
        "order": 23,
        "width": "14",
        "height": 1
    },
    {
        "id": "429359bf.c5c138",
        "type": "ui_group",
        "z": "",
        "name": "Last Status",
        "tab": "fdcd7900.20fe98",
        "order": 3,
        "disp": true,
        "width": "21",
        "collapse": true
    },
    {
        "id": "72439b11.60eaa4",
        "type": "ui_group",
        "z": "",
        "name": "Device Session State",
        "tab": "41630de2.7aac44",
        "order": 2,
        "disp": true,
        "width": "14",
        "collapse": false
    },
    {
        "id": "987b2ff2.bac02",
        "type": "ui_group",
        "z": "",
        "name": "Topics",
        "tab": "593d368e.5a32a8",
        "order": 2,
        "disp": true,
        "width": 14,
        "collapse": false
    },
    {
        "id": "450bb1b5.12d1b",
        "type": "ui_group",
        "z": "",
        "name": "Log",
        "tab": "41630de2.7aac44",
        "order": 3,
        "disp": true,
        "width": "21",
        "collapse": false
    },
    {
        "id": "5a34fba2.eab4a4",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "setTopics",
        "func": "var settings=global.get(\"config.settings\");\n\nvar deviceId=settings.deviceId;\nvar region=settings.categorization.region;\nvar site=settings.categorization.site;\nvar subSite=settings.categorization.subSite;\n\nvar category=region + \"/\" + site + \"/\" + subSite;\nvar categoryRegionSite=region + \"/\" + site;\nvar categoryRegion=region;\n\n\nlet updateConfigTopics = [];\nupdateConfigTopics.push(\"UPDATE/iot-control/\" + category + \"/device/\" + deviceId + \"/configuration\");\nupdateConfigTopics.push(\"UPDATE/iot-control/\" + category + \"/device/configuration\");\nupdateConfigTopics.push(\"UPDATE/iot-control/\" + categoryRegionSite + \"/device/configuration\");\nupdateConfigTopics.push(\"UPDATE/iot-control/\" + categoryRegion + \"/device/configuration\");\nupdateConfigTopics.push(\"UPDATE/iot-control/device/configuration\");\n\nlet commandTopics = [];\ncommandTopics.push(\"CREATE/iot-control/\" + category + \"/device/\" + deviceId + \"/command\");\ncommandTopics.push(\"CREATE/iot-control/\" + category + \"/device/command\");\ncommandTopics.push(\"CREATE/iot-control/\" + categoryRegionSite + \"/device/command\");\ncommandTopics.push(\"CREATE/iot-control/\" + categoryRegion + \"/device/command\");\ncommandTopics.push(\"CREATE/iot-control/device/command\");\n\nvar statusTopic = \"UPDATE/iot-control/\" + category + \"/device/\" + deviceId + \"/status\";\nvar metricsTopic = \"CREATE/iot-event/\" + category + \"/device/\" + deviceId + \"/metrics\";\n\n\nsettings.topics = {\n    deviceSubs: {\n        updateConfigTopics: updateConfigTopics,\n        commandTopics: commandTopics\n    },\n    devicePubs: {\n        statusTopic: statusTopic,\n        metricsTopic: metricsTopic\n    }\n};\n\nvar newMsg = {\n    settings: settings\n}\n\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 120,
        "y": 320,
        "wires": [
            [
                "470c37fc.6ecaf8",
                "4aa99cb8.2e8474",
                "5b219412.45070c",
                "10e6ded9.505f71",
                "342afc33.ff4c54",
                "89a9b6a1.883448",
                "e1c0bc43.8f96f",
                "682f939d.30a69c"
            ]
        ]
    },
    {
        "id": "cd673ec3.6a003",
        "type": "ui_text",
        "z": "99ad3953.c28978",
        "group": "66acec59.eb0f14",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Test",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 340,
        "y": 240,
        "wires": []
    },
    {
        "id": "147c8e0c.6593e2",
        "type": "mqtt out",
        "z": "81b16b1.5822198",
        "name": "sendCommand",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "broker": "62bac859.25e008",
        "x": 1208,
        "y": 115,
        "wires": []
    },
    {
        "id": "dbf9bda4.2e0a2",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "createCommandMessage",
        "func": "var solaceUtils = global.get(\"solaceUtils\");\n\n\nvar timestamp = new Date().toISOString();\nvar exchangeId = solaceUtils.uuid();\n\nvar cmdMsg = {\n    timeout: msg.payload.timeout || 10,\n    numResponsesExpected: msg.payload.numResponsesExpected,\n    numStatusMsgsExpected: msg.payload.numStatusMsgsExpected || 0,\n    topic: global.get(\"config.settings.topics.commandTopic\"),\n    payload: {\n        timestamp: timestamp,\n        exchangeId: exchangeId,\n        command: msg.payload.command\n    }\n}\n\n\nreturn cmdMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 898,
        "y": 195,
        "wires": [
            [
                "19a72724.be4699",
                "6c5dd8a4.c31328",
                "155d3d7.84b0fc3",
                "add174bb.e80b78",
                "2db18deb.c30432",
                "147c8e0c.6593e2",
                "bbddae7e.19bdf",
                "9d91d0d1.9a81e",
                "15c4170c.707c69"
            ]
        ]
    },
    {
        "id": "1c75bcee.1f80b3",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SEND_SHORT_STATUS",
        "group": "8ee14afa.96dc08",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SEND_SHORT_STATUS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SEND_SHORT_STATUS\",\"numResponsesExpected\":2,\"numStatusMsgsExpected\":0,\"timeout\":8}",
        "payloadType": "json",
        "topic": "",
        "x": 318,
        "y": 135,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "d03b5071.8c8",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SEND_FULL_STATUS",
        "group": "8ee14afa.96dc08",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SEND_FULL_STATUS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SEND_FULL_STATUS\",\"numResponsesExpected\":7,\"numStatusMsgsExpected\":0,\"timeout\":8}",
        "payloadType": "json",
        "topic": "",
        "x": 328,
        "y": 175,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "4f57d689.4d5c28",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SUSPEND_TELEMETRY",
        "group": "8ee14afa.96dc08",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SUSPEND_TELEMETRY",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SUSPEND_TELEMETRY\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 318,
        "y": 215,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "46b3b2b2.659eec",
        "type": "comment",
        "z": "81b16b1.5822198",
        "name": "Device Commands",
        "info": "",
        "x": 298,
        "y": 55,
        "wires": []
    },
    {
        "id": "1b0efc43.99add4",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "RESUME_TELEMETRY",
        "group": "8ee14afa.96dc08",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "RESUME_TELEMETRY",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"RESUME_TELEMETRY\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 318,
        "y": 255,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "ed94eadf.67d2d8",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": " SEND_ACTIVE_TELEMETRY_PARAMS",
        "group": "8ee14afa.96dc08",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": " SEND_ACTIVE_TELEMETRY_PARAMS",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SEND_ACTIVE_TELEMETRY_PARAMS\",\"numResponsesExpected\":2,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 268,
        "y": 295,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "abbd1d3a.82b25",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SEND_ACTIVE_RUNTIME_CONFIG",
        "group": "8ee14afa.96dc08",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SEND_ACTIVE_RUNTIME_CONFIG",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SEND_ACTIVE_RUNTIME_CONFIG\",\"numResponsesExpected\":6,\"numStatusMsgsExpected\":0,\"timeout\":10}",
        "payloadType": "json",
        "topic": "",
        "x": 288,
        "y": 335,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "3f73c07e.e6449",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SEND_RUNTIME_CONFIG_FILE",
        "group": "8ee14afa.96dc08",
        "order": 8,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SEND_RUNTIME_CONFIG_FILE",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SEND_RUNTIME_CONFIG_FILE\",\"numResponsesExpected\":-1,\"numStatusMsgsExpected\":0,\"timeout\":10}",
        "payloadType": "json",
        "topic": "",
        "x": 290,
        "y": 380,
        "wires": [
            [
                "f020e364.c7368"
            ]
        ]
    },
    {
        "id": "a444c1b4.74ebe",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "DELETE_RUNTIME_CONFIG_FILE",
        "group": "8ee14afa.96dc08",
        "order": 9,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "DELETE_RUNTIME_CONFIG_FILE",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"DELETE_RUNTIME_CONFIG_FILE\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 280,
        "y": 460,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "ad794ad.be3e9b8",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "PERSIST_ACTIVE_CONFIG",
        "group": "8ee14afa.96dc08",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "PERSIST_ACTIVE_CONFIG",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"PERSIST_ACTIVE_CONFIG\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 300,
        "y": 500,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "f74c92a8.77045",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "REBOOT",
        "group": "8ee14afa.96dc08",
        "order": 13,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "REBOOT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"REBOOT\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":6,\"timeout\":30}",
        "payloadType": "json",
        "topic": "",
        "x": 368,
        "y": 636,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "b6d83879.a8c628",
        "type": "function",
        "z": "254a06be.b756fa",
        "name": "addMsg2Log",
        "func": "\n// initialise the counter to 0 if it doesn't exist already\nvar dashboardLog = context.get('dashboardLog')|| [];\n\ndashboardLog.push(msg);\nif (dashboardLog.length > 20){\n    // Delete oldest message if > 20\n    dashboardLog.shift();\n    dashboardLog.length = 20;\n} \n\n// store the value back\ncontext.set('dashboardLog',dashboardLog);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = dashboardLog;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 220,
        "wires": [
            [
                "4ca312c.75b09ec"
            ]
        ]
    },
    {
        "id": "4ca312c.75b09ec",
        "type": "ui_template",
        "z": "254a06be.b756fa",
        "group": "121b4eba.b76d41",
        "name": "eventLog",
        "order": 4,
        "width": "8",
        "height": "21",
        "format": "\n\n<div ng-repeat=\"x in msg.payload\">\n <font color=\"red\">{{x.topic}}</font>\n <div>{{x.payload}}</div>\n</div>\n\n<!--\n\n\n<ul>\n <li ng-repeat=\"x in msg.payload\">\n <font color=\"red\">{{x.topic}}</font>\n    <ul>\n        <li>{{x.payload}}</li>\n    </ul>\n </li>\n</ul>\n-->",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "templateScope": "local",
        "x": 910,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "55c6e4df.340cac",
        "type": "mqtt in",
        "z": "254a06be.b756fa",
        "name": "listen2StatusMessages",
        "topic": "UPDATE/iot-control/+/+/+/device/+/status",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 330,
        "y": 400,
        "wires": [
            [
                "4141094c.e05d08",
                "68827c04.7386a4",
                "b6d83879.a8c628"
            ]
        ]
    },
    {
        "id": "68827c04.7386a4",
        "type": "debug",
        "z": "254a06be.b756fa",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 650,
        "y": 400,
        "wires": []
    },
    {
        "id": "4141094c.e05d08",
        "type": "debug",
        "z": "254a06be.b756fa",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "x": 640,
        "y": 360,
        "wires": []
    },
    {
        "id": "470c37fc.6ecaf8",
        "type": "debug",
        "z": "475cded7.6c736",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "settings.topics",
        "targetType": "msg",
        "x": 550,
        "y": 260,
        "wires": []
    },
    {
        "id": "4aa99cb8.2e8474",
        "type": "ui_text",
        "z": "475cded7.6c736",
        "group": "ab9ffc37.e23ab",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device Id:",
        "format": "{{msg.settings.deviceId}}",
        "layout": "row-left",
        "x": 380,
        "y": 320,
        "wires": []
    },
    {
        "id": "5b219412.45070c",
        "type": "ui_text",
        "z": "475cded7.6c736",
        "group": "ab9ffc37.e23ab",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Region:",
        "format": "{{msg.settings.categorization.region}}",
        "layout": "row-left",
        "x": 380,
        "y": 360,
        "wires": []
    },
    {
        "id": "10e6ded9.505f71",
        "type": "ui_text",
        "z": "475cded7.6c736",
        "group": "ab9ffc37.e23ab",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Site:",
        "format": "{{msg.settings.categorization.site}}",
        "layout": "row-left",
        "x": 370,
        "y": 400,
        "wires": []
    },
    {
        "id": "342afc33.ff4c54",
        "type": "ui_text",
        "z": "475cded7.6c736",
        "group": "ab9ffc37.e23ab",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Sub-Site:",
        "format": "{{msg.settings.categorization.subSite}}",
        "layout": "row-left",
        "x": 380,
        "y": 440,
        "wires": []
    },
    {
        "id": "f2c645ce.cd1ca8",
        "type": "ui_text",
        "z": "475cded7.6c736",
        "group": "987b2ff2.bac02",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device Subscriptions - Update Config Topics:",
        "format": "",
        "layout": "row-left",
        "x": 500,
        "y": 480,
        "wires": []
    },
    {
        "id": "ee44af9c.b2b6f",
        "type": "file in",
        "z": "475cded7.6c736",
        "name": "read config file",
        "filename": "solace-xdk110-mgmt-config.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 380,
        "y": 100,
        "wires": [
            [
                "6ca4640.613f29c"
            ]
        ]
    },
    {
        "id": "1e288e65.2cb8f2",
        "type": "inject",
        "z": "475cded7.6c736",
        "name": "startUp",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 140,
        "y": 100,
        "wires": [
            [
                "ee44af9c.b2b6f"
            ]
        ]
    },
    {
        "id": "cbc2737d.63abe",
        "type": "debug",
        "z": "475cded7.6c736",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 930,
        "y": 100,
        "wires": []
    },
    {
        "id": "6ca4640.613f29c",
        "type": "json",
        "z": "475cded7.6c736",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 550,
        "y": 100,
        "wires": [
            [
                "5a1ab290.a9f7cc"
            ]
        ]
    },
    {
        "id": "5a1ab290.a9f7cc",
        "type": "change",
        "z": "475cded7.6c736",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "config",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 100,
        "wires": [
            [
                "cbc2737d.63abe",
                "5a34fba2.eab4a4"
            ]
        ]
    },
    {
        "id": "8eab3049.ddd91",
        "type": "catch",
        "z": "475cded7.6c736",
        "name": "catchConfigFileErrors",
        "scope": [
            "ee44af9c.b2b6f",
            "6ca4640.613f29c"
        ],
        "uncaught": false,
        "x": 160,
        "y": 160,
        "wires": [
            [
                "ac797344.a4659"
            ]
        ]
    },
    {
        "id": "ac797344.a4659",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "logConfigFileErrors",
        "func": "node.error(\"CONFIG FILE ERROR: \\n\" + JSON.stringify(msg.error));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "1e3d4002.580e9",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Version:",
        "format": "{{msg.payload.version}}",
        "layout": "row-left",
        "x": 560,
        "y": 100,
        "wires": []
    },
    {
        "id": "a2f3d83f.dacbc8",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Date:",
        "format": "{{msg.payload.date}}",
        "layout": "row-left",
        "x": 550,
        "y": 140,
        "wires": []
    },
    {
        "id": "19640171.0e9bcf",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Author:",
        "format": "{{msg.payload.author}}",
        "layout": "row-left",
        "x": 560,
        "y": 180,
        "wires": []
    },
    {
        "id": "ff400ef.a9efbf",
        "type": "comment",
        "z": "475cded7.6c736",
        "name": "Read the config file",
        "info": "",
        "x": 150,
        "y": 60,
        "wires": []
    },
    {
        "id": "5140abbc.147dc4",
        "type": "mqtt in",
        "z": "81b16b1.5822198",
        "name": "listen2AllStatusMessages",
        "topic": "UPDATE/iot-control/+/+/+/device/+/status",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 238,
        "y": 796,
        "wires": [
            [
                "7cca64f5.d2392c"
            ]
        ]
    },
    {
        "id": "476f0134.05379",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "add2ResponseLog",
        "func": "// record the time received\nmsg.timestampReceived = new Date().toISOString();\n\nvar responseLog = flow.get('responseLog')|| [];\n\nresponseLog.unshift(msg);\n\nlet numResponsesReceived = global.get('state.interaction.numResponsesReceived') || 0;\nglobal.set('state.interaction.numResponsesReceived', numResponsesReceived + 1);\n\n// store the value back\nflow.set('responseLog',responseLog);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = responseLog;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 718,
        "y": 896,
        "wires": [
            [
                "89391d0a.4e2f2"
            ]
        ]
    },
    {
        "id": "19a72724.be4699",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "clearResponseLog",
        "func": "\nvar responseLog = [];\n\nflow.set('responseLog', responseLog);\n\nvar newMsg={};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1218,
        "y": 255,
        "wires": [
            [
                "89391d0a.4e2f2"
            ]
        ]
    },
    {
        "id": "89391d0a.4e2f2",
        "type": "ui_template",
        "z": "81b16b1.5822198",
        "group": "f8633bdf.aeb048",
        "name": "displayResponseLog",
        "order": 1,
        "width": "15",
        "height": "6",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <font color=\"red\">{{x.topic}} @ {{x.timestampReceived}}</font>\n    </li>\n    <div>\n        <pre>{{x.payload | json}}</pre>\n    </div>\n</div>\n</ol>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1528,
        "y": 896,
        "wires": [
            []
        ]
    },
    {
        "id": "7c1c8df4.099074",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Disconnect Device",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "DISCONNECT_DEVICE",
        "payloadType": "str",
        "topic": "",
        "x": 150,
        "y": 200,
        "wires": [
            [
                "e14e9cd9.1a2e7",
                "f74b84a6.ead498"
            ]
        ]
    },
    {
        "id": "52f2d1c1.e2bbc",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "composeSEMPV2_ClientId_Disabled",
        "func": "\n/*\n{\n  \"solaceBroker\": {\n    \"sempV2\": {\n      \"basePath\": \"https://mr1dns3dpz5u9l.messaging.solace.cloud:943/SEMP/v2/config\",\n      \"vpn\": \"xdk-dev\",\n      \"virtualRouter\": \"primary\",\n      \"user\": \"xdk-dev-admin\",\n      \"password\": \"9tm83dpntm0oa624ut6jq2nnlo\"\n    }\n  },\n*/\n\nvar deviceId=global.get(\"config.settings.deviceId\");\n\nvar sempV2=global.get(\"config.solaceBroker.sempV2\");\n\nvar url=sempV2.basePath+\"/msgVpns/\"+sempV2.vpn+\"/mqttSessions/\"+deviceId+\",\"+sempV2.virtualRouter;\n\nvar headers = {\n      'Authorization': 'Basic ' + new Buffer(sempV2.user + ':' + sempV2.password).toString('base64')\n}   \n\nvar payload = {\n  \"enabled\": false\n}\n\nvar httpMsg = {\n    headers: headers,\n    method: \"PATCH\",\n    url: url,\n    payload: payload,\n    requestTimeout: 30000\n}\n\nreturn httpMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 630,
        "y": 220,
        "wires": [
            [
                "d83cf342.a5d02"
            ]
        ]
    },
    {
        "id": "d83cf342.a5d02",
        "type": "http request",
        "z": "c50bcf9b.51248",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 890,
        "y": 220,
        "wires": [
            [
                "f842eab1.7640c8"
            ]
        ]
    },
    {
        "id": "ea36b4f5.dc5008",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "composeSEMPV2_ClientId_Enabled",
        "func": "\n\nvar deviceId=global.get(\"config.settings.deviceId\");\n\nvar sempV2=global.get(\"config.solaceBroker.sempV2\");\n\nvar url=sempV2.basePath+\"/msgVpns/\"+sempV2.vpn+\"/mqttSessions/\"+deviceId+\",\"+sempV2.virtualRouter;\n\nvar headers = {\n      'Authorization': 'Basic ' + new Buffer(sempV2.user + ':' + sempV2.password).toString('base64')\n}   \n\nvar payload = {\n  \"enabled\": true\n}\n\nvar httpMsg = {\n    headers: headers,\n    method: \"PATCH\",\n    url: url,\n    payload: payload,\n    requestTimeout: 30000\n}\n\nreturn httpMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 360,
        "wires": [
            [
                "76342766.a0c3d8"
            ]
        ]
    },
    {
        "id": "76342766.a0c3d8",
        "type": "http request",
        "z": "c50bcf9b.51248",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 850,
        "y": 360,
        "wires": [
            [
                "2e27b4f1.3f01ac"
            ]
        ]
    },
    {
        "id": "6d843544.30278c",
        "type": "inject",
        "z": "81b16b1.5822198",
        "name": "startUp",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 868,
        "y": 275,
        "wires": [
            [
                "19a72724.be4699",
                "9fb74e53.a509d",
                "6c5dd8a4.c31328",
                "57a30708.353a18",
                "9d91d0d1.9a81e"
            ]
        ]
    },
    {
        "id": "9fb74e53.a509d",
        "type": "ui_template",
        "z": "81b16b1.5822198",
        "group": "897e460.b057bb8",
        "name": "displayResponseStatus",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<!--<div ng-bind-html=\"msg.payload\"></div>-->\n<div>success: {{msg.payload.success}}</div>\ninfo: <div>{{msg.payload.info}}</div>\n\n<ul>\n    <li>\n        status: {{msg.payload.statusCode}}\n    </li>\n    <li>\n        statusDescr: {{msg.payload.statusDescr}}\n    </li>\n    <li>\n        numberResponses: {{msg.payload.numResponses}}\n    </li>\n    <li>\n        numStatusMsgs: {{msg.payload.numStatusMsgs}}\n    </li>\n</ul>\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1538,
        "y": 776,
        "wires": [
            []
        ]
    },
    {
        "id": "bc7289f6.bade08",
        "type": "file in",
        "z": "475cded7.6c736",
        "name": "read statusStatus map file",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 630,
        "y": 840,
        "wires": [
            [
                "de6aa3da.28995"
            ]
        ]
    },
    {
        "id": "69fe1147.3306f",
        "type": "inject",
        "z": "475cded7.6c736",
        "name": "startUp",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "x": 120,
        "y": 880,
        "wires": [
            [
                "348f193c.c40696",
                "d725ff2b.efb77",
                "ee17ee93.e53fc",
                "457d670e.910048"
            ]
        ]
    },
    {
        "id": "de6aa3da.28995",
        "type": "json",
        "z": "475cded7.6c736",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 810,
        "y": 840,
        "wires": [
            [
                "fef65de9.4a1d5"
            ]
        ]
    },
    {
        "id": "5916da65.fd4ea4",
        "type": "catch",
        "z": "81b16b1.5822198",
        "name": "catchAll",
        "scope": null,
        "uncaught": false,
        "x": 638,
        "y": 496,
        "wires": [
            [
                "884ecdaa.66c99",
                "40f69973.131b58",
                "d27f361e.184888",
                "57a30708.353a18"
            ]
        ]
    },
    {
        "id": "884ecdaa.66c99",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "logError",
        "func": "\nnode.error(\"COMMAND RESPONSE PARSE ERROR:\" +\n\"\\nmessage:\" + msg.error.message + \n\"\\nsource:\" + JSON.stringify(msg.error.source) +\n\"\\ndata:\\n\" + JSON.stringify(msg.payload));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 788,
        "y": 496,
        "wires": [
            [
                "cf12c25a.f7ccb"
            ]
        ]
    },
    {
        "id": "cf12c25a.f7ccb",
        "type": "debug",
        "z": "81b16b1.5822198",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "x": 948,
        "y": 496,
        "wires": []
    },
    {
        "id": "f5fd4e06.c433e",
        "type": "catch",
        "z": "475cded7.6c736",
        "name": "catch: code map errors",
        "scope": [
            "bc7289f6.bade08",
            "348f193c.c40696",
            "94583d8d.488dd",
            "d725ff2b.efb77",
            "4dcdb90b.5f8f88",
            "ee17ee93.e53fc",
            "ae68820e.5646e",
            "457d670e.910048"
        ],
        "uncaught": false,
        "x": 140,
        "y": 1120,
        "wires": [
            [
                "caf01a12.4b3ad8"
            ]
        ]
    },
    {
        "id": "caf01a12.4b3ad8",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "logError",
        "func": "node.error(\"CODE MAP ERROR: \\n\" + JSON.stringify(msg.error));\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "b1fe1331.d721b",
        "type": "comment",
        "z": "475cded7.6c736",
        "name": "read the code maps",
        "info": "",
        "x": 130,
        "y": 800,
        "wires": []
    },
    {
        "id": "348f193c.c40696",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "send statusStatus fn",
        "func": "\n\nvar codeMapsConfig = global.get('config.settings.codeMaps');\n\nvar fn = codeMapsConfig.directory + '/' + codeMapsConfig.statusStatusFilename;\n\nvar newMsg = {\n    filename: fn\n}\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 840,
        "wires": [
            [
                "bc7289f6.bade08"
            ]
        ]
    },
    {
        "id": "bc39d89c.6e5938",
        "type": "debug",
        "z": "475cded7.6c736",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1310,
        "y": 800,
        "wires": []
    },
    {
        "id": "92018f8e.d6bb8",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "test",
        "func": "\nvar map = new Map(global.get('statusMsgStatusCodeMap'));\n\nvar _0 = map.get(0);\nvar _1 = map.get(1);\n\nvar newMsg = {\n    payload: {\n        _0: _0,\n        _1: _1\n    }\n}\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 800,
        "wires": [
            [
                "bc39d89c.6e5938"
            ]
        ]
    },
    {
        "id": "94583d8d.488dd",
        "type": "file in",
        "z": "475cded7.6c736",
        "name": "read statusDescr map file",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 630,
        "y": 920,
        "wires": [
            [
                "72a12f58.806b4"
            ]
        ]
    },
    {
        "id": "72a12f58.806b4",
        "type": "json",
        "z": "475cded7.6c736",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 810,
        "y": 920,
        "wires": [
            [
                "3aaedcb0.7a4b64"
            ]
        ]
    },
    {
        "id": "d725ff2b.efb77",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "send statusDescr fn",
        "func": "\n\nvar codeMapsConfig = global.get('config.settings.codeMaps');\n\nvar fn = codeMapsConfig.directory + '/' + codeMapsConfig.statusDescrFilename;\n\nvar newMsg = {\n    filename: fn\n}\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 390,
        "y": 920,
        "wires": [
            [
                "94583d8d.488dd"
            ]
        ]
    },
    {
        "id": "8fb0b8d2.55a6c8",
        "type": "debug",
        "z": "475cded7.6c736",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1310,
        "y": 880,
        "wires": []
    },
    {
        "id": "cdb85d2a.8cb51",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "test",
        "func": "\nvar map = new Map(global.get('statusMsgDescrCodeMap'));\n\nvar _0 = map.get(0);\nvar _1 = map.get(1);\n\nvar newMsg = {\n    payload: {\n        _0: _0,\n        _1: _1\n    }\n}\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 880,
        "wires": [
            [
                "8fb0b8d2.55a6c8"
            ]
        ]
    },
    {
        "id": "fef65de9.4a1d5",
        "type": "change",
        "z": "475cded7.6c736",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "codeMaps.statusMsgStatusCodeMap",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "3aaedcb0.7a4b64",
        "type": "change",
        "z": "475cded7.6c736",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "codeMaps.statusMsgDescrCodeMap",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "4dcdb90b.5f8f88",
        "type": "file in",
        "z": "475cded7.6c736",
        "name": "read retcode map file",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 620,
        "y": 1000,
        "wires": [
            [
                "31baea24.ec8e76"
            ]
        ]
    },
    {
        "id": "31baea24.ec8e76",
        "type": "json",
        "z": "475cded7.6c736",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 810,
        "y": 1000,
        "wires": [
            [
                "6c5d59a.60b6ca8"
            ]
        ]
    },
    {
        "id": "ee17ee93.e53fc",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "send retcode fn",
        "func": "\n\nvar codeMapsConfig = global.get('config.settings.codeMaps');\n\nvar fn = codeMapsConfig.directory + '/' + codeMapsConfig.retcodeFilename;\n\nvar newMsg = {\n    filename: fn\n}\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 370,
        "y": 1000,
        "wires": [
            [
                "4dcdb90b.5f8f88"
            ]
        ]
    },
    {
        "id": "39107a88.7801d6",
        "type": "debug",
        "z": "475cded7.6c736",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1310,
        "y": 960,
        "wires": []
    },
    {
        "id": "f3667448.cfb128",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "test",
        "func": "\nvar map = new Map(global.get('retcodeMap'));\n\nvar _204 = map.get(204);\nvar _205 = map.get(205);\n\nvar newMsg = {\n    payload: {\n        _204: _204,\n        _205: _205\n    }\n}\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1010,
        "y": 960,
        "wires": [
            [
                "39107a88.7801d6"
            ]
        ]
    },
    {
        "id": "6c5d59a.60b6ca8",
        "type": "change",
        "z": "475cded7.6c736",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "codeMaps.retcodeMap",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "ae68820e.5646e",
        "type": "file in",
        "z": "475cded7.6c736",
        "name": "read appModule map file",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 630,
        "y": 1080,
        "wires": [
            [
                "6dfeba0c.3517e4"
            ]
        ]
    },
    {
        "id": "6dfeba0c.3517e4",
        "type": "json",
        "z": "475cded7.6c736",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 810,
        "y": 1080,
        "wires": [
            [
                "eb1c7a82.3c7df8"
            ]
        ]
    },
    {
        "id": "457d670e.910048",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "send appModule fn",
        "func": "\n\nvar codeMapsConfig = global.get('config.settings.codeMaps');\n\nvar fn = codeMapsConfig.directory + '/' + codeMapsConfig.appModuleFilename;\n\nvar newMsg = {\n    filename: fn\n}\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 1080,
        "wires": [
            [
                "ae68820e.5646e"
            ]
        ]
    },
    {
        "id": "eb1c7a82.3c7df8",
        "type": "change",
        "z": "475cded7.6c736",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "codeMaps.appModuleIdMap",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "a71075f4.88c488",
        "type": "debug",
        "z": "475cded7.6c736",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1330,
        "y": 1040,
        "wires": []
    },
    {
        "id": "dcb8cc75.3bc07",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "test",
        "func": "\nvar map = new Map(global.get('appModuleIdMap'));\n\nvar _63 = map.get(63);\nvar _64 = map.get(64);\n\nvar newMsg = {\n    payload: {\n        _63: _63,\n        _64: _64\n    }\n}\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1030,
        "y": 1040,
        "wires": [
            [
                "a71075f4.88c488"
            ]
        ]
    },
    {
        "id": "6c5dd8a4.c31328",
        "type": "ui_template",
        "z": "81b16b1.5822198",
        "group": "1f069aa7.efcc35",
        "name": "displayCommandSent",
        "order": 1,
        "width": "15",
        "height": "2",
        "format": "<!--<div ng-bind-html=\"msg.payload\"></div>-->\n\n<ul>\n    <li>\n        topic: {{msg.topic}}\n    </li>\n    {{msg.payload}}\n</ul>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1228,
        "y": 215,
        "wires": [
            []
        ]
    },
    {
        "id": "4e5a4a28.2ea814",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "createNoResponseMessage",
        "func": "\n\nvar timestamp = new Date().toISOString();\n\n\nvar newMsg = {\n    payload: {\n        success: false,\n        timestampReceived: timestamp,\n        statusCode: -1,\n        statusDescr: \"TIMEOUT (no response received)\",\n        numResponses: 0\n    }\n}\n\nreturn newMsg;\n\n  ",
        "outputs": 1,
        "noerr": 0,
        "x": 1248,
        "y": 776,
        "wires": [
            [
                "9fb74e53.a509d"
            ]
        ]
    },
    {
        "id": "45eb1365.dd5c1c",
        "type": "mytimeout",
        "z": "81b16b1.5822198",
        "name": "response timer",
        "outtopic": "",
        "outsafe": "",
        "outwarning": "",
        "outunsafe": "off",
        "warning": "0",
        "timer": "",
        "debug": false,
        "ndebug": false,
        "ignoreCase": false,
        "repeat": false,
        "again": false,
        "x": 748,
        "y": 776,
        "wires": [
            [
                "9cb70344.c7ed4",
                "cf7ae5d3.d7c818",
                "1e275552.7cf4fb"
            ],
            [
                "b91bacbe.d7c2f"
            ]
        ]
    },
    {
        "id": "155d3d7.84b0fc3",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "set timer",
        "func": "\nlet timeout = msg.timeout || 10;\n\nvar newMsg = {\n    payload: \"on\",\n    timeout: timeout\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 508,
        "y": 776,
        "wires": [
            [
                "45eb1365.dd5c1c",
                "eeead8.094db528"
            ]
        ]
    },
    {
        "id": "7e67b5e5.f640cc",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "cancel Timer",
        "func": "var newMsg = {\n    payload: \"cancel\"\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 518,
        "y": 816,
        "wires": [
            [
                "45eb1365.dd5c1c"
            ]
        ]
    },
    {
        "id": "b91bacbe.d7c2f",
        "type": "ui_text",
        "z": "81b16b1.5822198",
        "group": "897e460.b057bb8",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "display countdown",
        "label": "countdown:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 978,
        "y": 796,
        "wires": []
    },
    {
        "id": "bbddae7e.19bdf",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "setState",
        "func": "let interaction = {\n    type: \"COMMAND\",\n    state: \"IN_PROGRESS\",\n    numResponsesReceived: 0,\n    numResponsesExpected: msg.numResponsesExpected,\n    numStatusMsgsExpected: msg.numStatusMsgsExpected,\n    numStatusMsgsReceived: 0,\n    details : {\n        commandMessage: msg\n    }\n}\n\nglobal.set('state.interaction', interaction);\n\n// set the flow state\nflow.set('exchangeId', msg.payload.exchangeId);\nflow.set('command', msg.payload.command);\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1188,
        "y": 175,
        "wires": [
            []
        ]
    },
    {
        "id": "2f00b84e.f96bd8",
        "type": "ui_toast",
        "z": "81b16b1.5822198",
        "position": "dialog",
        "displayTime": "60",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "ok",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "inProgressModal",
        "x": 1218,
        "y": 556,
        "wires": [
            [
                "bad6bbe0.ec1e78"
            ]
        ]
    },
    {
        "id": "add174bb.e80b78",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "create Modal",
        "func": "msg.topic = \"Command Sent\";\nmsg.payload = \"waiting for response(s) ...\";\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1198,
        "y": 375,
        "wires": [
            [
                "2f00b84e.f96bd8"
            ]
        ]
    },
    {
        "id": "62ca77e8.f999d8",
        "type": "comment",
        "z": "81b16b1.5822198",
        "name": "todo: create a modal without button and with countdown",
        "info": "",
        "x": 1338,
        "y": 596,
        "wires": []
    },
    {
        "id": "9cb70344.c7ed4",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "cancel Modal",
        "func": "var newMsg = {\n    payload:''\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 528,
        "y": 716,
        "wires": [
            [
                "2f00b84e.f96bd8"
            ]
        ]
    },
    {
        "id": "122ed8ad.b0e437",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "clearState",
        "func": "\n\n\nglobal.set('state.interaction.state', 'FINISHED');\n\nflow.set('exchangeId', 'undefined');\nflow.set('command', undefined);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1488,
        "y": 1076,
        "wires": [
            []
        ]
    },
    {
        "id": "2db18deb.c30432",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "clearResponse",
        "func": "\n\n\nvar newMsg={};\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1208,
        "y": 335,
        "wires": [
            [
                "9fb74e53.a509d"
            ]
        ]
    },
    {
        "id": "587b7f43.9cc33",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "TRIGGER_SAMPLE_ERROR",
        "group": "8ee14afa.96dc08",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "TRIGGER_SAMPLE_ERROR",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"TRIGGER_SAMPLE_ERROR\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":1,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 308,
        "y": 556,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "9f07cf50.b7dad",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "TRIGGER_SAMPLE_FATAL_ERROR",
        "group": "8ee14afa.96dc08",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "TRIGGER_SAMPLE_FATAL_ERROR",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"TRIGGER_SAMPLE_FATAL_ERROR\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":7,\"timeout\":60}",
        "payloadType": "json",
        "topic": "",
        "x": 278,
        "y": 596,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "888a132d.1e6fb",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "inProgressCheck",
        "property": "state.interaction.state",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "IN_PROGRESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 658,
        "y": 195,
        "wires": [
            [
                "cdee0a17.fb7338"
            ],
            [
                "dbf9bda4.2e0a2"
            ]
        ]
    },
    {
        "id": "cdee0a17.fb7338",
        "type": "ui_toast",
        "z": "81b16b1.5822198",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Command / configuration already in progress. Wait until finished.",
        "name": "CommandAlreadyInProgress",
        "x": 908,
        "y": 155,
        "wires": [
            []
        ]
    },
    {
        "id": "bad6bbe0.ec1e78",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "inProgressCheck",
        "property": "state.interaction.state",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "IN_PROGRESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1458,
        "y": 556,
        "wires": [
            [
                "add174bb.e80b78"
            ]
        ]
    },
    {
        "id": "605a1480.d20a5c",
        "type": "ui_toast",
        "z": "81b16b1.5822198",
        "position": "top right",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Response Timeout - No Response",
        "name": "NoResponseNotification",
        "x": 1538,
        "y": 736,
        "wires": []
    },
    {
        "id": "fb3747b4.101d28",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "createNoResponseNotification",
        "func": "\nlet state = global.get('state');\n\nlet displayMessage = \"command\";\ntry {\n    displayMessage = \"command: \" + state.interaction.details.commandMessage.payload.command;\n} catch (e) {}\n\nvar newMsg = {\n    payload: displayMessage\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1258,
        "y": 736,
        "wires": [
            [
                "605a1480.d20a5c"
            ]
        ]
    },
    {
        "id": "f72c9fc0.2f3ba",
        "type": "inject",
        "z": "475cded7.6c736",
        "name": "startUp",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "x": 100,
        "y": 1300,
        "wires": [
            [
                "75b77219.f1835c",
                "731f7867.0eda88"
            ]
        ]
    },
    {
        "id": "75b77219.f1835c",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "setClearState",
        "func": "\nglobal.set('state', undefined);\n\nlet state = {\n    interaction: {},\n    device: {}\n}\n\nglobal.set('state', state);\n\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/state\",\n    payload: {\n        updatedDeviceState: state.device\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 1300,
        "wires": [
            [
                "dc18dc0c.c1ece"
            ]
        ]
    },
    {
        "id": "3a05b520.2e799a",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "filterByExchangeId",
        "property": "payload.exchangeId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "exchangeId",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 478,
        "y": 916,
        "wires": [
            [
                "476f0134.05379"
            ],
            [
                "94f4746c.6a2878"
            ]
        ]
    },
    {
        "id": "cf7ae5d3.d7c818",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "noResponses?",
        "property": "state.interaction.numResponsesReceived",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 968,
        "y": 756,
        "wires": [
            [
                "fb3747b4.101d28",
                "4e5a4a28.2ea814",
                "122ed8ad.b0e437"
            ]
        ]
    },
    {
        "id": "fbc3daaa.dd95e8",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "UNKNOWN_COMMAND",
        "group": "8ee14afa.96dc08",
        "order": 14,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "UNKNOWN_COMMAND",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"UNKNOWN_COMMAND\",\"numResponsesExpected\":1,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 318,
        "y": 676,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "94f4746c.6a2878",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "add2StatusMsgLog",
        "func": "// record the time received\nmsg.timestampReceived = new Date().toISOString();\n\nvar statusMsgLog = flow.get('statusMsgLog')|| [];\n\nstatusMsgLog.push(msg);\nif(statusMsgLog.length > 20) {\n    statusMsgLog.shift();\n    statusMsgLog.length = 20;\n}\n\n// store the value back\nflow.set('statusMsgLog',statusMsgLog);\n\nlet numStatusMsgsReceived = global.get('state.interaction.numStatusMsgsReceived') || 0;\nglobal.set('state.interaction.numStatusMsgsReceived', numStatusMsgsReceived + 1);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = statusMsgLog;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 718,
        "y": 936,
        "wires": [
            [
                "98430f1e.c7ce4"
            ]
        ]
    },
    {
        "id": "98430f1e.c7ce4",
        "type": "ui_template",
        "z": "81b16b1.5822198",
        "group": "855228ad.eacff8",
        "name": "displayStatusMsgLog",
        "order": 1,
        "width": "15",
        "height": "15",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <font color=\"red\">{{x.topic}} @ {{x.timestampReceived}}</font>\n    </li>\n    <div>\n        <pre>{{x.payload | json}}</pre>\n    </div>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1528,
        "y": 936,
        "wires": [
            []
        ]
    },
    {
        "id": "57a30708.353a18",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "clearState",
        "func": "\nglobal.set('state.interaction.state', 'FINISHED');\n// set the flow state\nflow.set('exchangeId', 'undefined');\nflow.set('command', undefined);\n",
        "outputs": 1,
        "noerr": 0,
        "x": 968,
        "y": 395,
        "wires": [
            []
        ]
    },
    {
        "id": "9d91d0d1.9a81e",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "clearStatusMsgLog",
        "func": "\nvar statusMsgLog = [];\n\nflow.set('statusMsgLog',statusMsgLog);\n\nvar newMsg={};\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1218,
        "y": 295,
        "wires": [
            [
                "98430f1e.c7ce4"
            ]
        ]
    },
    {
        "id": "39898fe.e15667",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check UNKNOWN_COMMAND",
        "func": "\n// read the code maps\n/*\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n*/\n\nmsg.payload.success = (!msg.payload.success) && (msg.payload.firstResponse.statusCode === 4);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 638,
        "y": 1096,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "873e5fcf.f5454",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check TRIGGER_SAMPLE_ERROR",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the sample error\nlet statusMsgLog = flow.get('statusMsgLog');\nif(statusMsgLog === undefined || statusMsgLog.length === 0) {\n    msg.payload.success = false;\n    msg.payload.info = \"no sample error message received\";\n    return msg;\n}\n\nlet lastStatusMsg = statusMsgLog[0].payload;\n    \nlet success = (lastStatusMsg.statusCode === 2);\nsuccess = success && (lastStatusMsg.descrCode === 21);\nsuccess = success && (lastStatusMsg.items[0].appError.code === 245);\nsuccess = success && (lastStatusMsg.items[0].appError.moduleId === 64);\nsuccess = success && (lastStatusMsg.items[0].appError.severityId === 2);\nsuccess = success && (lastStatusMsg.items[0].appError.packageId === 55);\n\nlet userMessage = 'ok';\nif(!success) {\n    msg.payload.success = false;\n    userMessage = \"sample error message codes not as expected\";\n}\n\n// now decode the appError\n        \nmsg.payload.info = {\n    message: userMessage,\n    status: statusMsgStatusCodeMap.get(lastStatusMsg.statusCode),\n    statusDescr: statusMsgDescrCodeMap.get(lastStatusMsg.descrCode),\n    error: {\n        module: appModuleIdMap.get(lastStatusMsg.items[0].appError.moduleId),\n        code: retcodeMap.get(lastStatusMsg.items[0].appError.code)\n    }\n}\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 648,
        "y": 1136,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "40f69973.131b58",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "createInternalExceptionMsg",
        "func": "\n\nvar timestamp = new Date().toISOString();\n\n\nvar newMsg = {\n    payload: {\n        success: '?',\n        timestampReceived: timestamp,\n        statusCode: -1,\n        statusDescr: \"INTERNAL EXCEPTION\",\n        numResponses: 0,\n        info: msg\n    }\n}\n\nreturn newMsg;\n\n  ",
        "outputs": 1,
        "noerr": 0,
        "x": 848,
        "y": 536,
        "wires": [
            [
                "9fb74e53.a509d"
            ]
        ]
    },
    {
        "id": "c1416883.a8a308",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "inProgressCheck",
        "property": "state.interaction.state",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "IN_PROGRESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 238,
        "y": 916,
        "wires": [
            [
                "3a05b520.2e799a"
            ]
        ]
    },
    {
        "id": "7cca64f5.d2392c",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "deviceIdCheck",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "config.settings.deviceId",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 228,
        "y": 856,
        "wires": [
            [
                "31305bb5.fad4d4"
            ]
        ]
    },
    {
        "id": "3cb8e12e.afaabe",
        "type": "mqtt in",
        "z": "a307a629.5ef888",
        "name": "listen2AllStatusMessages",
        "topic": "UPDATE/iot-control/+/+/+/device/+/status",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "9e4df3dc.9a2ac",
                "4e07406b.6ae1c"
            ]
        ]
    },
    {
        "id": "9e4df3dc.9a2ac",
        "type": "switch",
        "z": "a307a629.5ef888",
        "name": "deviceIdCheck",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "config.settings.deviceId",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 240,
        "y": 780,
        "wires": [
            [
                "3cde2950.a51f96"
            ]
        ]
    },
    {
        "id": "97f0fd00.f3262",
        "type": "function",
        "z": "a307a629.5ef888",
        "name": "add2ResponseMsgLog",
        "func": "// record the time received\nmsg.timestampReceived = new Date().toISOString();\n\nvar responseMsgLog = flow.get('responseMsgLog')|| [];\n\nresponseMsgLog.push(msg);\nif(responseMsgLog.length > 20) {\n    responseMsgLog.shift();\n    responseMsgLog.length = 20;\n}\n\n// store the value back\nflow.set('responseMsgLog',responseMsgLog);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = responseMsgLog;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 820,
        "wires": [
            [
                "69b50252.22380c"
            ]
        ]
    },
    {
        "id": "3cde2950.a51f96",
        "type": "switch",
        "z": "a307a629.5ef888",
        "name": "exchangeIdCheck",
        "property": "payload.exchangeId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 250,
        "y": 840,
        "wires": [
            [
                "97f0fd00.f3262"
            ],
            [
                "72f8f23c.7111ac",
                "4100cd9c.d6aa54"
            ]
        ]
    },
    {
        "id": "72f8f23c.7111ac",
        "type": "function",
        "z": "a307a629.5ef888",
        "name": "add2StatusMsgLog",
        "func": "// record the time received\nmsg.timestampReceived = new Date().toISOString();\n\n// read the code maps & convert to strings\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\nmsg.statusCodeStr = statusMsgStatusCodeMap.get(msg.payload.statusCode);\nmsg.statusDescrStr = statusMsgDescrCodeMap.get(msg.payload.descrCode);\n\n\n\nvar statusMsgLog = flow.get('statusMsgLog')|| [];\n\nstatusMsgLog.push(msg);\nif(statusMsgLog.length > 20) {\n    statusMsgLog.shift();\n    statusMsgLog.length = 20;\n}\n\n// store the value back\nflow.set('statusMsgLog',statusMsgLog);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = statusMsgLog;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 880,
        "wires": [
            [
                "6c560247.a4caac"
            ]
        ]
    },
    {
        "id": "6c560247.a4caac",
        "type": "ui_template",
        "z": "a307a629.5ef888",
        "group": "829376d8.fa27e8",
        "name": "displayStatusMsgLog",
        "order": 1,
        "width": "21",
        "height": "10",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <div><font color=\"red\">{{x.topic}} @ {{x.timestampReceived}}</font></div>\n        <div>code:<b>{{x.statusCodeStr}}</b>, descr:<b>{{x.statusDescrStr}}</b></div>\n    </li>\n    <div>\n        <pre>{{x.payload | json}}</pre>\n    </div>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 860,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "3cc99278.2b982e",
        "type": "ui_button",
        "z": "a307a629.5ef888",
        "name": "ClearAllLogs",
        "group": "cf742316.07462",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Clear All Logs",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "num",
        "topic": "",
        "x": 310,
        "y": 500,
        "wires": [
            [
                "22623982.cdf036",
                "ddd96951.3dea48"
            ]
        ]
    },
    {
        "id": "22623982.cdf036",
        "type": "function",
        "z": "a307a629.5ef888",
        "name": "clearStatusMsgLog",
        "func": "\nvar statusMsgLog = [];\n\nflow.set('statusMsgLog',statusMsgLog);\n\nvar newMsg={};\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 500,
        "wires": [
            [
                "6c560247.a4caac"
            ]
        ]
    },
    {
        "id": "69b50252.22380c",
        "type": "ui_template",
        "z": "a307a629.5ef888",
        "group": "9e7c4b18.47fdf8",
        "name": "displayResponseMsgLog",
        "order": 1,
        "width": "21",
        "height": "10",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <font color=\"red\">{{x.topic}} @ {{x.timestampReceived}}</font>\n    </li>\n    <div>\n        <pre>{{x.payload | json}}</pre>\n    </div>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 870,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "ddd96951.3dea48",
        "type": "function",
        "z": "a307a629.5ef888",
        "name": "clearResponseMsgLog",
        "func": "\nvar responseMsgLog = [];\n\nflow.set('responseMsgLog',responseMsgLog);\n\nvar newMsg={};\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 530,
        "y": 540,
        "wires": [
            [
                "69b50252.22380c"
            ]
        ]
    },
    {
        "id": "5e3454d3.f3f26c",
        "type": "comment",
        "z": "a307a629.5ef888",
        "name": "status logs: -----------------------------------------",
        "info": "errors & fatal errors: interpreted + originals\n",
        "x": 200,
        "y": 460,
        "wires": []
    },
    {
        "id": "815a934.09cd87",
        "type": "inject",
        "z": "a307a629.5ef888",
        "name": "startUp",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 100,
        "y": 500,
        "wires": [
            [
                "3cc99278.2b982e",
                "404a2ba2.a66004"
            ]
        ]
    },
    {
        "id": "c7122310.cf11a",
        "type": "ui_text",
        "z": "a307a629.5ef888",
        "group": "24a3db02.501974",
        "order": 5,
        "width": "3",
        "height": "1",
        "name": "connected",
        "label": "Connected:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 90,
        "y": 340,
        "wires": []
    },
    {
        "id": "dc2e6aad.4f6008",
        "type": "ui_text",
        "z": "a307a629.5ef888",
        "group": "24a3db02.501974",
        "order": 5,
        "width": "3",
        "height": "1",
        "name": "errros",
        "label": "Errors:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 70,
        "y": 380,
        "wires": []
    },
    {
        "id": "94a4f436.de6cf8",
        "type": "ui_text",
        "z": "a307a629.5ef888",
        "group": "24a3db02.501974",
        "order": 5,
        "width": "3",
        "height": "1",
        "name": "Disconnects",
        "label": "Disconnects:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 90,
        "y": 420,
        "wires": []
    },
    {
        "id": "19b786af.e81fc9",
        "type": "comment",
        "z": "a307a629.5ef888",
        "name": "stats: --------------------------------------------",
        "info": "",
        "x": 190,
        "y": 300,
        "wires": []
    },
    {
        "id": "eeead8.094db528",
        "type": "debug",
        "z": "81b16b1.5822198",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "timeout",
        "targetType": "msg",
        "x": 778,
        "y": 656,
        "wires": []
    },
    {
        "id": "89e94499.c65988",
        "type": "comment",
        "z": "81b16b1.5822198",
        "name": "analyze the responses & status messages",
        "info": "",
        "x": 308,
        "y": 1056,
        "wires": []
    },
    {
        "id": "1e275552.7cf4fb",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "genericCheck",
        "func": "\nlet responseLog = flow.get('responseLog');\nif(responseLog === undefined || responseLog.length === 0) return;\n\n// read the code maps\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the first response\nlet firstResponse = responseLog[0].payload;\nlet statusCodeStr = statusMsgStatusCodeMap.get(firstResponse.statusCode);\n\nlet statusDescrStr = \"-\";\nif(firstResponse.descrCode !== 0) {\n    statusDescrStr = statusMsgDescrCodeMap.get(firstResponse.descrCode);\n}\nlet numResponsesReceived = global.get('state.interaction.numResponsesReceived') || 0;\nlet numResponsesExpected = global.get('state.interaction.numResponsesExpected') || 0;\n\nlet numStatusMsgsReceived = global.get('state.interaction.numStatusMsgsReceived') || 0;\nlet numStatusMsgsExpected = global.get('state.interaction.numStatusMsgsExpected') || 0;\n\nlet success = (firstResponse.statusCode === 3);\nif(numResponsesExpected > -1) success = success && (numResponsesReceived === numResponsesExpected);\nsuccess = success && (numStatusMsgsReceived === numStatusMsgsExpected);\n\nlet newMsg = {\n    payload : {\n        success: success,\n        statusCode: statusCodeStr,\n        statusDescr: statusDescrStr,\n        numResponses: numResponsesReceived + \" of \" + numResponsesExpected,\n        numStatusMsgs: numStatusMsgsReceived + \" of \" + numStatusMsgsExpected,\n        firstResponse: firstResponse,\n        responseLog: responseLog\n    }\n}\n\nreturn newMsg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 228,
        "y": 1096,
        "wires": [
            [
                "67f75709.021e58",
                "c7dc826d.9d9b1"
            ]
        ]
    },
    {
        "id": "12b851a0.c5dede",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "passThrough",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1118,
        "y": 1276,
        "wires": [
            [
                "122ed8ad.b0e437",
                "9fb74e53.a509d",
                "6e79050e.80f68c"
            ]
        ]
    },
    {
        "id": "67f75709.021e58",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "switchCommandAnalysis",
        "property": "command",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "UNKNOWN_COMMAND",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TRIGGER_SAMPLE_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_ACTIVE_TELEMETRY_PARAMS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_VERSION_INFO",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_SHORT_STATUS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_FULL_STATUS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_ACTIVE_RUNTIME_CONFIG",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SEND_RUNTIME_CONFIG_FILE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DELETE_RUNTIME_CONFIG_FILE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PERSIST_ACTIVE_CONFIG",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REBOOT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "TRIGGER_SAMPLE_FATAL_ERROR",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "RESUME_TELEMETRY",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SUSPEND_TELEMETRY",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 15,
        "x": 250,
        "y": 1240,
        "wires": [
            [
                "39898fe.e15667"
            ],
            [
                "873e5fcf.f5454"
            ],
            [
                "90feb992.0483e8"
            ],
            [
                "ae7ca844.480128"
            ],
            [
                "f66a27db.d531c8"
            ],
            [
                "35adbc4d.f972b4"
            ],
            [
                "ab980558.382ba8"
            ],
            [
                "81fa40bd.237a5"
            ],
            [
                "4beb5fdb.f7f37"
            ],
            [
                "a2b9b305.5c967"
            ],
            [
                "db4190ce.87041"
            ],
            [
                "f49bfd6c.1e0f9"
            ],
            [
                "ec3074b.960b388"
            ],
            [
                "4f50e35b.43c93c"
            ],
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "90feb992.0483e8",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_ACTIVE_TELEMETRY_PARAMS",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the telemetry params\nlet secondResponse = msg.payload.responseLog[1].payload;\nlet success = (secondResponse.statusCode === 0) && (secondResponse.descrCode === 22);\n\n//activeTelemetryParams\nlet activeTelemetryRTParams = secondResponse.items[0].activeTelemetryRTParams;\nsuccess = success && (activeTelemetryRTParams !== undefined);\n// todo: test the schema of activeTelemetryRTParams\n\nlet userMessage = 'ok';\nif(!success) {\n    userMessage = \"no telemetry params received\";\n}\n\nmsg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    statusDescr: statusMsgDescrCodeMap.get(secondResponse.descrCode),\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 688,
        "y": 1176,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "c7dc826d.9d9b1",
        "type": "debug",
        "z": "81b16b1.5822198",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 588,
        "y": 1056,
        "wires": []
    },
    {
        "id": "dd36c2f0.19aec",
        "type": "ui_button",
        "z": "81b16b1.5822198",
        "name": "SEND_VERSION_INFO",
        "group": "8ee14afa.96dc08",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "SEND_VERSION_INFO",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "{\"command\":\"SEND_VERSION_INFO\",\"numResponsesExpected\":2,\"numStatusMsgsExpected\":0,\"timeout\":5}",
        "payloadType": "json",
        "topic": "",
        "x": 318,
        "y": 95,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "62063d0c.efa134",
        "type": "ui_toast",
        "z": "81b16b1.5822198",
        "position": "top right",
        "displayTime": "15",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Internal Exception",
        "name": "InternalErrorNotification",
        "x": 918,
        "y": 576,
        "wires": []
    },
    {
        "id": "d27f361e.184888",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "createMsg",
        "func": "\nmsg.payload = \"\\nmessage:\" + msg.error.message + \n\"\\nsource:\" + JSON.stringify(msg.error.source) +\n\"\\ndata:\\n\" + JSON.stringify(msg.payload);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 718,
        "y": 576,
        "wires": [
            [
                "62063d0c.efa134"
            ]
        ]
    },
    {
        "id": "ae7ca844.480128",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_VERSION_INFO",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the versions\nlet compatibleVersion = global.get('config.about.solaceXDKAppVersion');\nlet secondResponse = msg.payload.responseLog[1].payload;\nlet success = (secondResponse.statusCode === 0) && (secondResponse.descrCode === 52);\nlet statusDescr = statusMsgDescrCodeMap.get(secondResponse.descrCode);\nsuccess = success && (statusDescr !== undefined);\nlet userMessage = 'ok';\nif(!success) {\n    userMessage = \"statusDescription not mapped\";\n} else {\n    //versions\n    let versions = secondResponse.items[0].versions;\n    success = success && (versions !== undefined);\n    if(!success) {\n        userMessage = \"no versions received\";\n    }\n    // todo: test the schema of versions\n\n    // todo: test the actual versions\n    success = success &&\n                (versions.XDK_Version_Major === 3) && \n                (versions.XDK_Version_Minor === 6) && \n                (versions.XDK_Version_Patch === 0) && \n                (versions.XDK_App_Version === 1) && \n                (versions.Solace_App_Version_Major === compatibleVersion.major) && \n                (versions.Solace_App_Version_Minor === compatibleVersion.minor) && \n                (versions.Solace_App_Version_Patch === compatibleVersion.patch);\n    if(!success) {\n        let versionStr = compatibleVersion.major + '.' + compatibleVersion.minor + '.' + compatibleVersion.patch;\n        userMessage = \"wrong versions, expecting XDK:3.6.0 + 1; Solace XDK App: \" + versionStr;\n    }            \n}\nmsg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    statusDescr: statusDescr\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 638,
        "y": 1216,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "f66a27db.d531c8",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_SHORT_STATUS",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the short status\nlet secondResponse = msg.payload.responseLog[1].payload;\nlet success = (secondResponse.statusCode === 0) && (secondResponse.descrCode === 23);\nlet statusDescr = statusMsgDescrCodeMap.get(secondResponse.descrCode);\nsuccess = success && (statusDescr !== undefined);\nlet userMessage = 'ok';\nif(!success) {\n    userMessage = \"statusDescription not mapped\";\n} else {\n    // check the schema of items array\n    let stats = secondResponse.items[0].stats;\n    success = success && (stats !== undefined);\n    if(!success) {\n        userMessage = \"no stats received\";\n    }\n    let activeTelemetryRTParams = secondResponse.items[1].activeTelemetryRTParams;\n    success = success && (activeTelemetryRTParams !== undefined);\n    if(!success) {\n        userMessage = \"no activeTelemetryRTParams received\";\n    }\n}\nmsg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    statusDescr: statusDescr\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 638,
        "y": 1256,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "35adbc4d.f972b4",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_FULL_STATUS",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\nlet userMessage = 'todo: check schemas of the 6 responses...';\n\n//msg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    //status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    //statusDescr: statusDescr\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 628,
        "y": 1296,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "ab980558.382ba8",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_ACTIVE_RUNTIME_CONFIG",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n\n// expecting array of 5 responses\nlet userMessage = 'ok';\nlet success = true;\nlet statusDescr = '';\nmsg.payload.info = {};\n\n// targetTelemetryConfig\nlet targetTelemetryConfigResponse = msg.payload.responseLog[1].payload;\nsuccess = success && (targetTelemetryConfigResponse.statusCode === 0) && (targetTelemetryConfigResponse.descrCode === 57);\nif(!success) userMessage = \"targetTelemetryConfig: wrong statusCode or statusDescrCode\";\nelse {\n    statusDescr = statusMsgDescrCodeMap.get(targetTelemetryConfigResponse.descrCode);\n    success = success && (statusDescr !== undefined);\n    if(!success) {\n        userMessage = \"targetTelemetryConfig: statusDescription not mapped\";\n    } else {\n        msg.payload.info.targetTelemetryConfig = {\n            status: statusMsgStatusCodeMap.get(targetTelemetryConfigResponse.statusCode),\n            statusDescr: statusDescr\n        }\n        let targetTelemetryConfig = targetTelemetryConfigResponse.items[0];\n        // todo: check the schema\n    \n    }\n}\n// statusConfig\nif(success) {\n    let statusConfigResponse = msg.payload.responseLog[2].payload;\n    success = success && (statusConfigResponse.statusCode === 0) && (statusConfigResponse.descrCode === 56);\n    if(!success) userMessage = \"statusConfig: wrong statusCode or statusDescrCode\";\n    else {\n        statusDescr = statusMsgDescrCodeMap.get(statusConfigResponse.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"statusConfig: statusDescription not mapped\";\n        } else {\n            msg.payload.info.statusConfig = {\n                status: statusMsgStatusCodeMap.get(statusConfigResponse.statusCode),\n                statusDescr: statusDescr\n            }\n            let statusConfig = statusConfigResponse.items[0];\n            // todo: check the schema\n        }\n    }    \n}\n\n// mqttBrokerConnectionConfig\nif(success) {\n    let mqttBrokerConnectionConfigResponse = msg.payload.responseLog[3].payload;\n    success = success && (mqttBrokerConnectionConfigResponse.statusCode === 0) && (mqttBrokerConnectionConfigResponse.descrCode === 55);\n    if(!success) userMessage = \"mqttBrokerConnectionConfig: wrong statusCode or statusDescrCode\";\n    else {\n        statusDescr = statusMsgDescrCodeMap.get(mqttBrokerConnectionConfigResponse.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"mqttBrokerConnectionConfig: statusDescription not mapped\";\n        } else {\n            msg.payload.info.mqttBrokerConnectionConfig = {\n                status: statusMsgStatusCodeMap.get(mqttBrokerConnectionConfigResponse.statusCode),\n                statusDescr: statusDescr\n            }\n            let mqttBrokerConnectionConfig = mqttBrokerConnectionConfigResponse.items[0];\n            // todo: check the schema\n        \n        }\n    }    \n}\n// topicConfig\nif(success) {\n    let topicConfigResponse = msg.payload.responseLog[4].payload;\n    success = success && (topicConfigResponse.statusCode === 0) && (topicConfigResponse.descrCode === 54);\n    if(!success) userMessage = \"topicConfig: wrong statusCode or statusDescrCode\";\n    else {\n        statusDescr = statusMsgDescrCodeMap.get(topicConfigResponse.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"topicConfig: statusDescription not mapped\";\n        } else {\n            msg.payload.info.topicConfig = {\n                status: statusMsgStatusCodeMap.get(topicConfigResponse.statusCode),\n                statusDescr: statusDescr\n            }\n    \n            let topicConfig = topicConfigResponse.items[0];\n            // todo: check the schema\n        \n        }\n    }\n}\n\n// header\nif(success) {\n    let headerResponse = msg.payload.responseLog[5].payload;\n    success = success && (headerResponse.statusCode === 0) && (headerResponse.descrCode === 53);\n    if(!success) userMessage = \"header: wrong statusCode or statusDescrCode\";\n    else {\n        let statusDescr = statusMsgDescrCodeMap.get(headerResponse.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"header: statusDescription not mapped\";\n        } else {\n            msg.payload.info.header = {\n                status: statusMsgStatusCodeMap.get(headerResponse.statusCode),\n                statusDescr: statusDescr\n            }\n            // no items\n            //let general = generalResponse.items[0];\n            // todo: check the schema\n        \n        }\n    }    \n}\n\nmsg.payload.success = success;\nmsg.payload.info.message = userMessage;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 668,
        "y": 1336,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "81fa40bd.237a5",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SEND_RUNTIME_CONFIG_FILE",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// depending on device state, expecting 5 responses or 1\nlet deviceState = global.get('state.device');\nlet isRuntimeConfigFileExists = false;\nlet isRuntimeConfigFileExists_isKnown = false;\nif(Object.keys(deviceState).length > 0) {\n    if(deviceState.runtimeConfig !== undefined) {\n        if(deviceState.runtimeConfig.fileExists !== undefined) {\n            isRuntimeConfigFileExists = deviceState.runtimeConfig.fileExists; \n            isRuntimeConfigFileExists_isKnown = true;\n        }\n        \n    }\n}\n\nlet userMessage = 'ok';\nlet success = true;\nlet statusDescr = '';\nmsg.payload.info = {};\n\nif(!isRuntimeConfigFileExists_isKnown) {\n    // check from response\n    let numResponses = msg.payload.responseLog.length;\n    if(numResponses === 2) isRuntimeConfigFileExists = false;\n    else if(numResponses === 6) isRuntimeConfigFileExists = true;\n} \n\nif(!isRuntimeConfigFileExists) {\n    \n    let response = msg.payload.responseLog[1].payload;\n    success = success && (response.statusCode === 0) && (response.descrCode === 13);\n    if(!success) userMessage = \"response: wrong statusCode or statusDescrCode, expected 0 and 13\";\n    else {\n        statusDescr = statusMsgDescrCodeMap.get(response.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"response: statusDescription not mapped\";\n        } else {\n            userMessage = \"ok - no runtime config file exists\";\n        }\n    }\n    \n} else {\n    // expecting array of 5 responses\n    \n    // targetTelemetryConfig\n    let targetTelemetryConfigResponse = msg.payload.responseLog[1].payload;\n    success = success && (targetTelemetryConfigResponse.statusCode === 0) && (targetTelemetryConfigResponse.descrCode === 20);\n    if(!success) userMessage = \"targetTelemetryConfig: wrong statusCode or statusDescrCode, expected 0 and 20\";\n    else {\n        statusDescr = statusMsgDescrCodeMap.get(targetTelemetryConfigResponse.descrCode);\n        success = success && (statusDescr !== undefined);\n        if(!success) {\n            userMessage = \"targetTelemetryConfig: statusDescription not mapped\";\n        } else {\n            msg.payload.info.targetTelemetryConfig = {\n                status: statusMsgStatusCodeMap.get(targetTelemetryConfigResponse.statusCode),\n                statusDescr: statusDescr\n            }\n            let targetTelemetryConfig = targetTelemetryConfigResponse.items[0];\n            // todo: check the schema\n        \n        }\n    }\n    // statusConfig\n    if(success) {\n        let statusConfigResponse = msg.payload.responseLog[2].payload;\n        success = success && (statusConfigResponse.statusCode === 0) && (statusConfigResponse.descrCode === 19);\n        if(!success) userMessage = \"statusConfig: wrong statusCode or statusDescrCode, expected 0 and 19\";\n        else {\n            statusDescr = statusMsgDescrCodeMap.get(statusConfigResponse.descrCode);\n            success = success && (statusDescr !== undefined);\n            if(!success) {\n                userMessage = \"statusConfig: statusDescription not mapped\";\n            } else {\n                msg.payload.info.statusConfig = {\n                    status: statusMsgStatusCodeMap.get(statusConfigResponse.statusCode),\n                    statusDescr: statusDescr\n                }\n                let statusConfig = statusConfigResponse.items[0];\n                // todo: check the schema\n            }\n        }    \n    }\n    \n    // mqttBrokerConnectionConfig\n    if(success) {\n        let mqttBrokerConnectionConfigResponse = msg.payload.responseLog[3].payload;\n        success = success && (mqttBrokerConnectionConfigResponse.statusCode === 0) && (mqttBrokerConnectionConfigResponse.descrCode === 18);\n        if(!success) userMessage = \"mqttBrokerConnectionConfig: wrong statusCode or statusDescrCode, expected 0 and 18\";\n        else {\n            statusDescr = statusMsgDescrCodeMap.get(mqttBrokerConnectionConfigResponse.descrCode);\n            success = success && (statusDescr !== undefined);\n            if(!success) {\n                userMessage = \"mqttBrokerConnectionConfig: statusDescription not mapped\";\n            } else {\n                msg.payload.info.mqttBrokerConnectionConfig = {\n                    status: statusMsgStatusCodeMap.get(mqttBrokerConnectionConfigResponse.statusCode),\n                    statusDescr: statusDescr\n                }\n                let mqttBrokerConnectionConfig = mqttBrokerConnectionConfigResponse.items[0];\n                // todo: check the schema\n            \n            }\n        }    \n    }\n    // topicConfig\n    if(success) {\n        let topicConfigResponse = msg.payload.responseLog[4].payload;\n        success = success && (topicConfigResponse.statusCode === 0) && (topicConfigResponse.descrCode === 17);\n        if(!success) userMessage = \"topicConfig: wrong statusCode or statusDescrCode, expected 0 and 17\";\n        else {\n            statusDescr = statusMsgDescrCodeMap.get(topicConfigResponse.descrCode);\n            success = success && (statusDescr !== undefined);\n            if(!success) {\n                userMessage = \"topicConfig: statusDescription not mapped\";\n            } else {\n                msg.payload.info.topicConfig = {\n                    status: statusMsgStatusCodeMap.get(topicConfigResponse.statusCode),\n                    statusDescr: statusDescr\n                }\n        \n                let topicConfig = topicConfigResponse.items[0];\n                // todo: check the schema\n            \n            }\n        }\n    }\n    \n    // header\n    if(success) {\n        let headerResponse = msg.payload.responseLog[5].payload;\n        success = success && (headerResponse.statusCode === 0) && (headerResponse.descrCode === 14);\n        if(!success) userMessage = \"header: wrong statusCode or statusDescrCode, expected 0 and 14\";\n        else {\n            let statusDescr = statusMsgDescrCodeMap.get(headerResponse.descrCode);\n            success = success && (statusDescr !== undefined);\n            if(!success) {\n                userMessage = \"header: statusDescription not mapped\";\n            } else {\n                msg.payload.info.header = {\n                    status: statusMsgStatusCodeMap.get(headerResponse.statusCode),\n                    statusDescr: statusDescr\n                }\n                // no items\n                //let general = generalResponse.items[0];\n                // todo: check the schema\n            \n            }\n        }    \n    }\n}\n\nmsg.payload.success = success;\nmsg.payload.info.message = userMessage;\n\n// include updated device state\nif(success) {\n    msg.updatedDeviceState = {\n        runtimeConfig: {\n            fileExists: isRuntimeConfigFileExists\n        }\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 658,
        "y": 1376,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "f020e364.c7368",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "adjust4DeviceState-SEND_RUNTIME_CONFIG_FILE",
        "func": "\nlet deviceState = global.get('state.device') || {};\nlet isRuntimeConfigStateKnown = false;\nlet fileExists = false;\n\nif(Object.keys(deviceState).length > 0) {\n    let runtimeConfig = deviceState.runtimeConfig;\n    if(runtimeConfig !== undefined) {\n        fileExists = runtimeConfig.fileExists;\n        if(fileExists !== undefined) {\n            isRuntimeConfigStateKnown = true;\n        }\n    }\n}\n\nif(isRuntimeConfigStateKnown) {\n    if(fileExists) msg.payload.numResponsesExpected = 6;\n    else msg.payload.numResponsesExpected = 2;\n} else {\n    msg.payload.numResponsesExpected = -1;   \n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 220,
        "y": 420,
        "wires": [
            [
                "888a132d.1e6fb"
            ]
        ]
    },
    {
        "id": "6e79050e.80f68c",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "updateDeviceState",
        "func": "\nif(msg.updatedDeviceState !== undefined) {\n    let deviceId = global.get('config.settings.deviceId');\n    let newMsg = {\n        topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/state\",\n        payload: {\n            updatedDeviceState: msg.updatedDeviceState\n        }\n    }   \n    return newMsg;\n}\n\n\n\n// get device state and add whatever keys are in the object\n\n/*\n    if(deviceState.runtimeConfig === undefined) deviceState.runtimeConfig = {};\n    deviceState.runtimeConfig.fileExists = isRuntimeConfigFileExists;\n    global.set('state.device', deviceState);\n*/",
        "outputs": 1,
        "noerr": 0,
        "x": 1390,
        "y": 1280,
        "wires": [
            [
                "883b609e.0c02e"
            ]
        ]
    },
    {
        "id": "375d1ebd.c1bbb2",
        "type": "comment",
        "z": "475cded7.6c736",
        "name": "setup State",
        "info": "",
        "x": 90,
        "y": 1260,
        "wires": []
    },
    {
        "id": "883b609e.0c02e",
        "type": "mqtt out",
        "z": "81b16b1.5822198",
        "name": "send",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 1570,
        "y": 1280,
        "wires": []
    },
    {
        "id": "b0f1fdce.f2231",
        "type": "mqtt in",
        "z": "af56b18b.09c5c",
        "name": "receiveDeviceStateUpdates",
        "topic": "UPDATE/iot-mgmt/device/+/state",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 210,
        "y": 120,
        "wires": [
            [
                "278ba173.9c327e"
            ]
        ]
    },
    {
        "id": "c99e6344.d9f96",
        "type": "debug",
        "z": "af56b18b.09c5c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 430,
        "y": 340,
        "wires": []
    },
    {
        "id": "278ba173.9c327e",
        "type": "switch",
        "z": "af56b18b.09c5c",
        "name": "deviceIdCheck",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "config.settings.deviceId",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 180,
        "y": 180,
        "wires": [
            [
                "c99e6344.d9f96",
                "73c44349.d103dc"
            ]
        ]
    },
    {
        "id": "73c44349.d103dc",
        "type": "function",
        "z": "af56b18b.09c5c",
        "name": "updateDeviceState",
        "func": "if(msg.payload.updatedDeviceState !== undefined) {\n\n    let update = msg.payload.updatedDeviceState;\n    \n    let deviceState = global.get('state.device');\n    \n    var _merge = global.get(\"_merge\");\n    _merge(deviceState, update);\n    \n    msg.payload = deviceState;\n    \n    global.set('state.device', deviceState);\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 180,
        "wires": [
            [
                "a27a6fa6.69c8d",
                "c0dc6cb7.7e8d9"
            ]
        ]
    },
    {
        "id": "a27a6fa6.69c8d",
        "type": "debug",
        "z": "af56b18b.09c5c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 590,
        "y": 260,
        "wires": []
    },
    {
        "id": "4beb5fdb.f7f37",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check DELETE_RUNTIME_CONFIG_FILE",
        "func": "\nif(!msg.payload.success) return msg;\n\nmsg.updatedDeviceState = {\n    runtimeConfig: {\n        fileExists: false\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 665,
        "y": 1420,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "b9e77d9.9bd168",
        "type": "comment",
        "z": "a307a629.5ef888",
        "name": "state: --------------------------------------------",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "c0dc6cb7.7e8d9",
        "type": "ui_text",
        "z": "af56b18b.09c5c",
        "group": "19bb0d97.077502",
        "order": 0,
        "width": "7",
        "height": "1",
        "name": "rtConfFileExists",
        "label": "Runtime config file exists:",
        "format": "{{msg.payload.runtimeConfig.fileExists}}",
        "layout": "row-left",
        "x": 800,
        "y": 120,
        "wires": []
    },
    {
        "id": "4d396a15.c32fc4",
        "type": "ui_toast",
        "z": "475cded7.6c736",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "CANCEL",
        "raw": false,
        "topic": "reminder: read the state from device on button press",
        "name": "reminder todo",
        "x": 320,
        "y": 1360,
        "wires": [
            []
        ]
    },
    {
        "id": "dc18dc0c.c1ece",
        "type": "mqtt out",
        "z": "475cded7.6c736",
        "name": "send",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 510,
        "y": 1300,
        "wires": []
    },
    {
        "id": "9f3becbf.729b5",
        "type": "ui_ui_control",
        "z": "475cded7.6c736",
        "name": "",
        "events": "all",
        "x": 100,
        "y": 1460,
        "wires": [
            [
                "b0a2e996.e0d158"
            ]
        ]
    },
    {
        "id": "530fc5c1.545a4c",
        "type": "debug",
        "z": "475cded7.6c736",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 390,
        "y": 1460,
        "wires": []
    },
    {
        "id": "b0a2e996.e0d158",
        "type": "switch",
        "z": "475cded7.6c736",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "connect",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 250,
        "y": 1460,
        "wires": [
            [
                "530fc5c1.545a4c"
            ]
        ]
    },
    {
        "id": "bdfe9964.402488",
        "type": "comment",
        "z": "475cded7.6c736",
        "name": "catch a reload of the UI in a browser - not sure if we need it",
        "info": "",
        "x": 260,
        "y": 1420,
        "wires": []
    },
    {
        "id": "a2b9b305.5c967",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check PERSIST_ACTIVE_CONFIG",
        "func": "\nif(!msg.payload.success) return msg;\n\nmsg.updatedDeviceState = {\n    runtimeConfig: {\n        fileExists: true\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 1460,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "db4190ce.87041",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check REBOOT",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\nlet userMessage = 'todo: check the boot status schemas of the 6 status messages ...';\n\n//msg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    //status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    //statusDescr: statusDescr\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 600,
        "y": 1500,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "f49bfd6c.1e0f9",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check TRIGGER_SAMPLE_FATAL_ERROR",
        "func": "\nif(!msg.payload.success) return msg;\n\n// read the code maps\nlet appModuleIdMap = new Map(global.get('codeMaps.appModuleIdMap'));\nlet retcodeMap = new Map(global.get('codeMaps.retcodeMap'));\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\nlet userMessage = 'todo: check the fatal error + boot status schemas of the 6 status messages ...';\n\n//msg.payload.success = success;\nmsg.payload.info = {\n    message: userMessage,\n    //status: statusMsgStatusCodeMap.get(secondResponse.statusCode),\n    //statusDescr: statusDescr\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 690,
        "y": 1540,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "4f50e35b.43c93c",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check SUSPEND_TELEMETRY",
        "func": "\nif(!msg.payload.success) return msg;\n\nmsg.updatedDeviceState = {\n    telemetry: {\n        on: false\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 1580,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "ec3074b.960b388",
        "type": "function",
        "z": "81b16b1.5822198",
        "name": "check RESUME_TELEMETRY",
        "func": "\nif(!msg.payload.success) return msg;\n\nmsg.updatedDeviceState = {\n    telemetry: {\n        on: true\n    }\n}\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 1620,
        "wires": [
            [
                "12b851a0.c5dede"
            ]
        ]
    },
    {
        "id": "b27ac719.3f7ce8",
        "type": "comment",
        "z": "475cded7.6c736",
        "name": "load schemas - todo",
        "info": "https://ajv.js.org/#api\n\nhttps://github.com/alexandrainst/node-red-contrib-json-multi-schema\n\n",
        "x": 770,
        "y": 1260,
        "wires": []
    },
    {
        "id": "6a62b965.9c71a8",
        "type": "comment",
        "z": "732e6ace.9ebb04",
        "name": "status config",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "8b222d94.89fb6",
        "type": "comment",
        "z": "732e6ace.9ebb04",
        "name": "telemetry config",
        "info": "",
        "x": 120,
        "y": 500,
        "wires": []
    },
    {
        "id": "65a8b8ce.d413d8",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "sendPeriodicStatus",
        "label": "send periodic status?",
        "tooltip": "",
        "place": "Select option",
        "group": "64aeb854.85ddf8",
        "order": 1,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "true",
                "value": true,
                "type": "bool"
            },
            {
                "label": "false",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 502,
        "y": 160,
        "wires": [
            [
                "c083f7a6.b7c1a8"
            ]
        ]
    },
    {
        "id": "98768ede.eb98a",
        "type": "ui_button",
        "z": "732e6ace.9ebb04",
        "name": "save",
        "group": "64aeb854.85ddf8",
        "order": 11,
        "width": "10",
        "height": "1",
        "passthru": false,
        "label": "save changes",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "SAVE",
        "payloadType": "str",
        "topic": "",
        "x": 910,
        "y": 220,
        "wires": [
            [
                "4790381c.a8b958"
            ]
        ]
    },
    {
        "id": "5f47e5e8.27a57c",
        "type": "ui_button",
        "z": "732e6ace.9ebb04",
        "name": "save & send",
        "group": "64aeb854.85ddf8",
        "order": 12,
        "width": "11",
        "height": "1",
        "passthru": false,
        "label": "save & send configuration",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "SEND",
        "payloadType": "str",
        "topic": "",
        "x": 930,
        "y": 260,
        "wires": [
            [
                "4790381c.a8b958"
            ]
        ]
    },
    {
        "id": "9516220a.46ccc",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "compose-save",
        "func": "\nlet statusConfig = global.get('userEntries.deviceConfig.statusConfig');\n/*            \n            \"statusConfig\": {\n                \"sendPeriodicStatus\": true,\n                \"periodicStatusType\": \"FULL_STATUS\",\n                \"periodicStatusIntervalSecs\": 300,\n                \"qos\": 0,\n                \"apply\": \"TRANSIENT\"\n            }\n*/\n\nvar solaceUtils = global.get(\"solaceUtils\");\n\n\nvar timestamp = new Date().toISOString();\nvar exchangeId = solaceUtils.uuid();\n\nvar statusConfigMsg = {\n    topic: global.get(\"config.settings.topics.deviceSubs.updateConfigTopics[0]\"),\n    payload: {\n        type: \"status\",\n        timestamp: timestamp,\n        exchangeId: exchangeId,\n        tags: {\n            removeMe: 'soon'\n        }\n        /*            \n        {\n          \"tags\": {\n            \"mode\": \"status\"\n          },\n        \n        }\n        */\n    }\n}\n\nvar _merge = global.get(\"_merge\");\n_merge(statusConfigMsg.payload, statusConfig);\n\n//save for sending\nflow.set('configMsg', statusConfigMsg);\n\n\nreturn statusConfigMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1300,
        "y": 240,
        "wires": [
            [
                "81725acc.bda2a8"
            ]
        ]
    },
    {
        "id": "86b2b873.a9acc8",
        "type": "mqtt out",
        "z": "732e6ace.9ebb04",
        "name": "send",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "broker": "62bac859.25e008",
        "x": 2143,
        "y": 600,
        "wires": []
    },
    {
        "id": "4790381c.a8b958",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "func": "\nlet button = msg.payload;\n\nlet update = flow.get('userEntries.deviceConfig.statusConfig');\n\nlet statusConfig = global.get('userEntries.deviceConfig.statusConfig') || {};\n\n\nvar _merge = global.get(\"_merge\");\n_merge(statusConfig, update);\n\nglobal.set('userEntries.deviceConfig.statusConfig', statusConfig );\n\nif(button === 'SEND') {\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1120,
        "y": 240,
        "wires": [
            [
                "9516220a.46ccc"
            ]
        ]
    },
    {
        "id": "12d52138.690edf",
        "type": "comment",
        "z": "475cded7.6c736",
        "name": "setup userEntries",
        "info": "",
        "x": 100,
        "y": 1420,
        "wires": []
    },
    {
        "id": "731f7867.0eda88",
        "type": "function",
        "z": "475cded7.6c736",
        "name": "prepareUserEntries",
        "func": "\nlet userEntries = global.get('userEntries') || {};\n\nif(userEntries.deviceConfig === undefined) userEntries.deviceConfig = {};\nif(userEntries.deviceConfig.statusConfig === undefined) userEntries.deviceConfig.statusConfig = {};\n\n// more: topic config, mqtt broker config, telemetry config\n\nglobal.set('userEntries', userEntries);\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "1d85d36b.3a852d",
        "type": "inject",
        "z": "732e6ace.9ebb04",
        "name": "start",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "e37dd300.e7e5d"
            ]
        ]
    },
    {
        "id": "10bcaacc.6cef15",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.statusConfig.sendPeriodicStatus",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 322,
        "y": 160,
        "wires": [
            [
                "65a8b8ce.d413d8"
            ]
        ]
    },
    {
        "id": "c083f7a6.b7c1a8",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.statusConfig.sendPeriodicStatus",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 738,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b53e1b0.017cbe8",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "periodicStatusType",
        "label": "periodicStatusType",
        "tooltip": "",
        "place": "Select option",
        "group": "64aeb854.85ddf8",
        "order": 5,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "FULL_STATUS",
                "value": "FULL_STATUS",
                "type": "str"
            },
            {
                "label": "SHORT_STATUS",
                "value": "SHORT_STATUS",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 502,
        "y": 200,
        "wires": [
            [
                "15cd8f99.b81c9"
            ]
        ]
    },
    {
        "id": "dbb1a0cb.3247a",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.statusConfig.periodicStatusType",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 322,
        "y": 200,
        "wires": [
            [
                "b53e1b0.017cbe8"
            ]
        ]
    },
    {
        "id": "15cd8f99.b81c9",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.statusConfig.periodicStatusType",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 738,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "9a1ea8be.bfd998",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.statusConfig.periodicStatusIntervalSecs",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 322,
        "y": 240,
        "wires": [
            [
                "24f68809.54fc48"
            ]
        ]
    },
    {
        "id": "79853fb9.b1baf",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.statusConfig.periodicStatusIntervalSecs",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 738,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "24f68809.54fc48",
        "type": "ui_numeric",
        "z": "732e6ace.9ebb04",
        "name": "periodicStatusIntervalSecs",
        "label": "periodicStatusIntervalSecs",
        "tooltip": "",
        "group": "64aeb854.85ddf8",
        "order": 3,
        "width": "7",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}} seconds",
        "min": "60",
        "max": "300",
        "step": "30",
        "x": 532,
        "y": 240,
        "wires": [
            [
                "79853fb9.b1baf"
            ]
        ]
    },
    {
        "id": "17849466.9d9d6c",
        "type": "ui_numeric",
        "z": "732e6ace.9ebb04",
        "name": "qos",
        "label": "qos",
        "tooltip": "",
        "group": "64aeb854.85ddf8",
        "order": 7,
        "width": "7",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "0",
        "max": "1",
        "step": "1",
        "x": 462,
        "y": 280,
        "wires": [
            [
                "17b83ba2.50ca84"
            ]
        ]
    },
    {
        "id": "a41bdc8f.b3456",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.statusConfig.qos",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 322,
        "y": 280,
        "wires": [
            [
                "17849466.9d9d6c"
            ]
        ]
    },
    {
        "id": "17b83ba2.50ca84",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.statusConfig.qos",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 738,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "402d1028.37bef",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "apply",
        "label": "apply",
        "tooltip": "",
        "place": "Select option",
        "group": "64aeb854.85ddf8",
        "order": 9,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "TRANSIENT",
                "value": "TRANSIENT",
                "type": "str"
            },
            {
                "label": "PERSISTENT",
                "value": "PERSISTENT",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 462,
        "y": 320,
        "wires": [
            [
                "5a3c5e2d.461eb"
            ]
        ]
    },
    {
        "id": "969ff15a.b242d",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.statusConfig.apply",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 322,
        "y": 320,
        "wires": [
            [
                "402d1028.37bef"
            ]
        ]
    },
    {
        "id": "5a3c5e2d.461eb",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.statusConfig.apply",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 738,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "81725acc.bda2a8",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "inProgressCheck",
        "property": "state.interaction.state",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "IN_PROGRESS",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1683,
        "y": 540,
        "wires": [
            [
                "cc164178.a6c4"
            ],
            [
                "9beb31fe.8a0b8",
                "25e653d8.d0975c",
                "3ceff997.4a3136",
                "605a6222.486b3c"
            ]
        ]
    },
    {
        "id": "9beb31fe.8a0b8",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "setState",
        "func": "\nlet configMsg = flow.get('configMsg');\n\nlet interaction = {\n    type: \"CONFIGURATION\",\n    state: \"IN_PROGRESS\",\n    numResponsesReceived: 0,\n    numResponsesExpected: 1,\n    numStatusMsgsExpected: 0,\n    numStatusMsgsReceived: 0,\n    details : {\n        configurationMessage: configMsg\n    }\n}\n\nglobal.set('state.interaction', interaction);\n\n// set the flow state\nflow.set('exchangeId', configMsg.payload.exchangeId);\nflow.set('configType', configMsg.payload.type);\n\nreturn configMsg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1893,
        "y": 560,
        "wires": [
            [
                "4d053857.e72208",
                "86b2b873.a9acc8",
                "730b475c.358258"
            ]
        ]
    },
    {
        "id": "cc164178.a6c4",
        "type": "ui_toast",
        "z": "732e6ace.9ebb04",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Configuration / command already in progress. Wait until finished.",
        "name": "ConfigInProgress",
        "x": 1983,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "4d053857.e72208",
        "type": "ui_template",
        "z": "732e6ace.9ebb04",
        "group": "8557d3f1.efcac",
        "name": "displayConfigSent",
        "order": 5,
        "width": "21",
        "height": "2",
        "format": "<!--<div ng-bind-html=\"msg.payload\"></div>-->\n\n{{msg.topic}}\n<div>\n    <pre>{{msg.payload | json}}</pre>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 2183,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "25e653d8.d0975c",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "clearResponseStatus",
        "func": "\n\n\nvar newMsg={};\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1933,
        "y": 640,
        "wires": [
            [
                "88dfae80.12b9f"
            ]
        ]
    },
    {
        "id": "88dfae80.12b9f",
        "type": "ui_template",
        "z": "732e6ace.9ebb04",
        "group": "69ec3d8.d239dc4",
        "name": "displayResponseStatus",
        "order": 5,
        "width": 0,
        "height": 0,
        "format": "<!--<div ng-bind-html=\"msg.payload\"></div>-->\n<div>success: {{msg.payload.success}}</div>\ninfo: <div>{{msg.payload.info}}</div>\n\n<ul>\n    <li>\n        status: {{msg.payload.statusCode}}\n    </li>\n    <li>\n        statusDescr: {{msg.payload.statusDescr}}\n    </li>\n    <li>\n        numResponses: {{msg.payload.numResponses}}\n    </li>\n    <li>\n        numStatusMsgs: {{msg.payload.numStatusMsgs}}\n    </li>\n</ul>\n\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 2703,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "3ceff997.4a3136",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "set timer",
        "func": "\nlet timeout = msg.timeout || 10;\n\nvar newMsg = {\n    payload: \"on\",\n    timeout: timeout\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1893,
        "y": 760,
        "wires": [
            [
                "3c1bb89c.1bdd08"
            ]
        ]
    },
    {
        "id": "3c1bb89c.1bdd08",
        "type": "mytimeout",
        "z": "732e6ace.9ebb04",
        "name": "response timer",
        "outtopic": "",
        "outsafe": "",
        "outwarning": "",
        "outunsafe": "off",
        "warning": "0",
        "timer": "",
        "debug": false,
        "ndebug": false,
        "ignoreCase": false,
        "repeat": false,
        "again": false,
        "x": 1893,
        "y": 820,
        "wires": [
            [
                "6478a0a1.bde17",
                "8419fdc.2199c"
            ],
            [
                "1276f19d.36d93e"
            ]
        ]
    },
    {
        "id": "1276f19d.36d93e",
        "type": "ui_text",
        "z": "732e6ace.9ebb04",
        "group": "69ec3d8.d239dc4",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "display countdown",
        "label": "countdown:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "x": 2143,
        "y": 860,
        "wires": []
    },
    {
        "id": "6478a0a1.bde17",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "noResponses?",
        "property": "state.interaction.numResponsesReceived",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2133,
        "y": 780,
        "wires": [
            [
                "a373dbf1.761338",
                "9ad8cb10.f55ef8",
                "9fda73a8.38158"
            ]
        ]
    },
    {
        "id": "a373dbf1.761338",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "createNoResponseNotification",
        "func": "\nlet state = global.get('state');\n\nlet displayMessage = \"configuration\";\ntry {\n    displayMessage = \"config: \" + state.interaction.details.configurationMessage.payload.type;\n} catch (e) {}\n\nvar newMsg = {\n    payload: displayMessage\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2423,
        "y": 780,
        "wires": [
            [
                "b35c8a7f.efb418"
            ]
        ]
    },
    {
        "id": "b35c8a7f.efb418",
        "type": "ui_toast",
        "z": "732e6ace.9ebb04",
        "position": "top right",
        "displayTime": "3",
        "highlight": "red",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Response Timeout - No Response",
        "name": "NoResponseNotification",
        "x": 2703,
        "y": 780,
        "wires": []
    },
    {
        "id": "9ad8cb10.f55ef8",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "createNoResponseMessage",
        "func": "\n\nvar timestamp = new Date().toISOString();\n\n\nvar newMsg = {\n    payload: {\n        success: false,\n        timestampReceived: timestamp,\n        statusCode: -1,\n        statusDescr: \"TIMEOUT (no response received)\",\n        numResponses: 0\n    }\n}\n\nreturn newMsg;\n\n  ",
        "outputs": 1,
        "noerr": 0,
        "x": 2413,
        "y": 740,
        "wires": [
            [
                "88dfae80.12b9f"
            ]
        ]
    },
    {
        "id": "9fda73a8.38158",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "clearState",
        "func": "\n\n\nglobal.set('state.interaction.state', 'FINISHED');\n\nflow.set('exchangeId', 'undefined');\nflow.set('configType', undefined);\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2353,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "e0f7c087.46ed1",
        "type": "mqtt in",
        "z": "732e6ace.9ebb04",
        "name": "listen2AllStatusMessages",
        "topic": "UPDATE/iot-control/+/+/+/device/+/status",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 1743,
        "y": 980,
        "wires": [
            [
                "4c6626ab.5bb388"
            ]
        ]
    },
    {
        "id": "4c6626ab.5bb388",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "deviceIdCheck",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "config.settings.deviceId",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1733,
        "y": 1040,
        "wires": [
            [
                "7011700a.57035"
            ]
        ]
    },
    {
        "id": "47c3600d.d6245",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "inProgressCheck",
        "property": "state.interaction.state",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "IN_PROGRESS",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1743,
        "y": 1120,
        "wires": [
            [
                "ea43a287.d62d9"
            ]
        ]
    },
    {
        "id": "ea43a287.d62d9",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "filterByExchangeId",
        "property": "payload.exchangeId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "exchangeId",
                "vt": "flow"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1743,
        "y": 1160,
        "wires": [
            [
                "7c4548ce.81a898"
            ],
            [
                "92603ba9.14a3e8"
            ]
        ]
    },
    {
        "id": "7c4548ce.81a898",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "add2ResponseLog",
        "func": "// record the time received\nmsg.timestampReceived = new Date().toISOString();\n\nvar responseLog = flow.get('responseLog')|| [];\n\nresponseLog.unshift(msg);\n\nlet numResponsesReceived = global.get('state.interaction.numResponsesReceived') || 0;\nglobal.set('state.interaction.numResponsesReceived', numResponsesReceived + 1);\n\n// store the value back\nflow.set('responseLog',responseLog);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = responseLog;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2003,
        "y": 1160,
        "wires": [
            [
                "366779d1.ff2316"
            ]
        ]
    },
    {
        "id": "366779d1.ff2316",
        "type": "ui_template",
        "z": "732e6ace.9ebb04",
        "group": "5c4c88c5.f14fb8",
        "name": "displayResponseLog",
        "order": 1,
        "width": "21",
        "height": "2",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <font color=\"red\">{{x.topic}} @ {{x.timestampReceived}}</font>\n    </li>\n    <div>\n        <pre>{{x.payload | json}}</pre>\n    </div>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 2233,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "92603ba9.14a3e8",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "add2StatusMsgLog",
        "func": "// record the time received\nmsg.timestampReceived = new Date().toISOString();\n\nvar statusMsgLog = flow.get('statusMsgLog')|| [];\n\nstatusMsgLog.push(msg);\nif(statusMsgLog.length > 20) {\n    statusMsgLog.shift();\n    statusMsgLog.length = 20;\n}\n\n// store the value back\nflow.set('statusMsgLog',statusMsgLog);\n\nlet numStatusMsgsReceived = global.get('state.interaction.numStatusMsgsReceived') || 0;\nglobal.set('state.interaction.numStatusMsgsReceived', numStatusMsgsReceived + 1);\n\n// make it part of the outgoing msg object\nmsg = {};\nmsg.payload = statusMsgLog;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2003,
        "y": 1200,
        "wires": [
            [
                "a3f6bdde.cead3"
            ]
        ]
    },
    {
        "id": "8419fdc.2199c",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "genericCheck",
        "func": "\nlet responseLog = flow.get('responseLog');\nif(responseLog === undefined || responseLog.length === 0) return;\n\n// read the code maps\nlet statusMsgStatusCodeMap = new Map(global.get('codeMaps.statusMsgStatusCodeMap'));\nlet statusMsgDescrCodeMap = new Map(global.get('codeMaps.statusMsgDescrCodeMap'));\n\n// check the first response\nlet firstResponse = responseLog[0].payload;\nlet statusCodeStr = statusMsgStatusCodeMap.get(firstResponse.statusCode);\n\nlet statusDescrStr = \"-\";\nlet info = '';\nif(firstResponse.descrCode !== 0) {\n    statusDescrStr = statusMsgDescrCodeMap.get(firstResponse.descrCode);\n    info = firstResponse.details;\n}\nlet numResponsesReceived = global.get('state.interaction.numResponsesReceived') || 0;\nlet numResponsesExpected = global.get('state.interaction.numResponsesExpected') || 0;\n\nlet numStatusMsgsReceived = global.get('state.interaction.numStatusMsgsReceived') || 0;\nlet numStatusMsgsExpected = global.get('state.interaction.numStatusMsgsExpected') || 0;\n\nlet success = (firstResponse.statusCode === 3);\nif(numResponsesExpected > -1) success = success && (numResponsesReceived === numResponsesExpected);\nsuccess = success && (numStatusMsgsReceived === numStatusMsgsExpected);\n\nlet newMsg = {\n    payload : {\n        success: success,\n        info: info,\n        statusCode: statusCodeStr,\n        statusDescr: statusDescrStr,\n        numResponses: numResponsesReceived + \" of \" + numResponsesExpected,\n        numStatusMsgs: numStatusMsgsReceived + \" of \" + numStatusMsgsExpected,\n        firstResponse: firstResponse,\n        responseLog: responseLog\n    }\n}\n\nreturn newMsg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 2133,
        "y": 820,
        "wires": [
            [
                "9fda73a8.38158",
                "88dfae80.12b9f"
            ]
        ]
    },
    {
        "id": "605a6222.486b3c",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "clearResponseAndStatusLogs",
        "func": "\nvar emptyLog = [];\n\nflow.set('responseLog', emptyLog);\nflow.set('statusMsgLog', emptyLog);\n\nvar newMsg={};\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1963,
        "y": 680,
        "wires": [
            [
                "366779d1.ff2316",
                "a3f6bdde.cead3"
            ]
        ]
    },
    {
        "id": "b875575c.9801a8",
        "type": "inject",
        "z": "732e6ace.9ebb04",
        "name": "startUp",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 1673,
        "y": 660,
        "wires": [
            [
                "25e653d8.d0975c",
                "605a6222.486b3c",
                "4d053857.e72208"
            ]
        ]
    },
    {
        "id": "a3f6bdde.cead3",
        "type": "ui_template",
        "z": "732e6ace.9ebb04",
        "group": "c43aa043.ae983",
        "name": "displayStatusMsgLog",
        "order": 1,
        "width": "15",
        "height": "15",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <li>\n        <font color=\"red\">{{x.topic}} @ {{x.timestampReceived}}</font>\n    </li>\n    <div>\n        <pre>{{x.payload | json}}</pre>\n    </div>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 2233,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "31305bb5.fad4d4",
        "type": "switch",
        "z": "81b16b1.5822198",
        "name": "CommandCheck",
        "property": "state.interaction.type",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "COMMAND",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 430,
        "y": 860,
        "wires": [
            [
                "c1416883.a8a308"
            ]
        ]
    },
    {
        "id": "7011700a.57035",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "ConfigurationCheck",
        "property": "state.interaction.type",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "CONFIGURATION",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1753,
        "y": 1080,
        "wires": [
            [
                "47c3600d.d6245"
            ]
        ]
    },
    {
        "id": "15c4170c.707c69",
        "type": "debug",
        "z": "81b16b1.5822198",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1200,
        "y": 80,
        "wires": []
    },
    {
        "id": "730b475c.358258",
        "type": "debug",
        "z": "732e6ace.9ebb04",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 2163,
        "y": 520,
        "wires": []
    },
    {
        "id": "21ce33f.943facc",
        "type": "comment",
        "z": "732e6ace.9ebb04",
        "name": "todo: filter for expected status messages",
        "info": "",
        "x": 2073,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c8e2d568.fd1618",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "payloadFormat",
        "label": "payloadFormat",
        "tooltip": "",
        "place": "Select option",
        "group": "fbe688ce.9f8fb8",
        "order": 5,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "V1_JSON_VERBOSE",
                "value": "V1_JSON_VERBOSE",
                "type": "str"
            },
            {
                "label": "V1_JSON_COMPACT",
                "value": "V1_JSON_COMPACT",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 500,
        "y": 660,
        "wires": [
            [
                "71ad8af3.b40334"
            ]
        ]
    },
    {
        "id": "c3f93bd7.ca5978",
        "type": "inject",
        "z": "732e6ace.9ebb04",
        "name": "start",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "87b9a0.a5aa466"
            ]
        ]
    },
    {
        "id": "ec9d19cf.214878",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.eventFrequencyPerSec",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 580,
        "wires": [
            [
                "31630f8a.a291f"
            ]
        ]
    },
    {
        "id": "844fe956.d36998",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.eventFrequencyPerSec",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "2d10b7cf.92c9f8",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.sensors.accelerator",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 860,
        "wires": [
            [
                "2bcee9bc.7cbaa6"
            ]
        ]
    },
    {
        "id": "52807e52.de1cc",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.sensors.accelerator",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "f06a8dd9.a804c",
        "type": "ui_numeric",
        "z": "732e6ace.9ebb04",
        "name": "qos",
        "label": "qos",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 7,
        "width": "7",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}}",
        "min": "0",
        "max": "1",
        "step": "1",
        "x": 470,
        "y": 700,
        "wires": [
            [
                "421630b0.df9fc"
            ]
        ]
    },
    {
        "id": "ea6c6aa8.5677a8",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.qos",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 700,
        "wires": [
            [
                "f06a8dd9.a804c"
            ]
        ]
    },
    {
        "id": "421630b0.df9fc",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.qos",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "7dabadac.259b84",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "apply",
        "label": "apply",
        "tooltip": "",
        "place": "Select option",
        "group": "fbe688ce.9f8fb8",
        "order": 11,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "TRANSIENT",
                "value": "TRANSIENT",
                "type": "str"
            },
            {
                "label": "PERSISTENT",
                "value": "PERSISTENT",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 470,
        "y": 780,
        "wires": [
            [
                "2fb13858.ea2828"
            ]
        ]
    },
    {
        "id": "7e167883.d9de38",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.apply",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 780,
        "wires": [
            [
                "7dabadac.259b84"
            ]
        ]
    },
    {
        "id": "2fb13858.ea2828",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.apply",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "31630f8a.a291f",
        "type": "ui_numeric",
        "z": "732e6ace.9ebb04",
        "name": "eventFrequencyPerSec",
        "label": "eventFrequencyPerSec",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 1,
        "width": "7",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}} messages / second",
        "min": "1",
        "max": "25",
        "step": "1",
        "x": 530,
        "y": 580,
        "wires": [
            [
                "844fe956.d36998"
            ]
        ]
    },
    {
        "id": "9bfa5bc4.e33f68",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.samplesPerEvent",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 620,
        "wires": [
            [
                "fd69629f.2276e"
            ]
        ]
    },
    {
        "id": "291c9003.5c05e",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.samplesPerEvent",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "fd69629f.2276e",
        "type": "ui_numeric",
        "z": "732e6ace.9ebb04",
        "name": "samplesPerEvent",
        "label": "samplesPerEvent",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 3,
        "width": "7",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "",
        "format": "{{value}} sample set / message",
        "min": "1",
        "max": "4",
        "step": "1",
        "x": 510,
        "y": 620,
        "wires": [
            [
                "291c9003.5c05e"
            ]
        ]
    },
    {
        "id": "f648580.2a2d3a8",
        "type": "ui_dropdown",
        "z": "732e6ace.9ebb04",
        "name": "activateAtBootTime",
        "label": "activateAtBootTime?",
        "tooltip": "",
        "place": "Select option",
        "group": "fbe688ce.9f8fb8",
        "order": 9,
        "width": "7",
        "height": "1",
        "passthru": true,
        "options": [
            {
                "label": "true",
                "value": true,
                "type": "bool"
            },
            {
                "label": "false",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 510,
        "y": 740,
        "wires": [
            [
                "6ea53cbc.33fd34"
            ]
        ]
    },
    {
        "id": "12c2e08.051902",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.payloadFormat",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 660,
        "wires": [
            [
                "c8e2d568.fd1618"
            ]
        ]
    },
    {
        "id": "71ad8af3.b40334",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.payloadFormat",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "1e3576b5.4594c9",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.activateAtBootTime",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 740,
        "wires": [
            [
                "f648580.2a2d3a8"
            ]
        ]
    },
    {
        "id": "6ea53cbc.33fd34",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.activateAtBootTime",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "2bcee9bc.7cbaa6",
        "type": "ui_switch",
        "z": "732e6ace.9ebb04",
        "name": "accelerator",
        "label": "accelerator",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 14,
        "width": "7",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 490,
        "y": 860,
        "wires": [
            [
                "52807e52.de1cc"
            ]
        ]
    },
    {
        "id": "3b832d67.c04402",
        "type": "comment",
        "z": "732e6ace.9ebb04",
        "name": "more config",
        "info": "",
        "x": 170,
        "y": 1120,
        "wires": []
    },
    {
        "id": "d281279.672e5d8",
        "type": "ui_text",
        "z": "732e6ace.9ebb04",
        "group": "48c789a5.51c988",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "todo",
        "label": "todo",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 190,
        "y": 1160,
        "wires": []
    },
    {
        "id": "466469ec.98d178",
        "type": "ui_text",
        "z": "732e6ace.9ebb04",
        "group": "fbe688ce.9f8fb8",
        "order": 13,
        "width": 0,
        "height": 0,
        "name": "sensors",
        "label": "Select Sensors:",
        "format": "",
        "layout": "row-spread",
        "x": 340,
        "y": 820,
        "wires": []
    },
    {
        "id": "88ea80d2.d980b",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.sensors.gyroscope",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 900,
        "wires": [
            [
                "9c5335a3.0fcb18"
            ]
        ]
    },
    {
        "id": "9c5335a3.0fcb18",
        "type": "ui_switch",
        "z": "732e6ace.9ebb04",
        "name": "gyroscope",
        "label": "gyroscope",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 16,
        "width": "7",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 490,
        "y": 900,
        "wires": [
            [
                "53bc427c.25060c"
            ]
        ]
    },
    {
        "id": "53bc427c.25060c",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.sensors.gyroscope",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "d6e7de4c.2ad18",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.sensors.magnetometer",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 940,
        "wires": [
            [
                "cfba884a.f59e28"
            ]
        ]
    },
    {
        "id": "62d979b8.c31c78",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.sensors.temperature",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 980,
        "wires": [
            [
                "2d23a90b.d5b4b6"
            ]
        ]
    },
    {
        "id": "67181910.9ba6c8",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "set",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "userEntries.deviceConfig.telemetryConfig.sensors.light",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 1020,
        "wires": [
            [
                "8f349840.974fd8"
            ]
        ]
    },
    {
        "id": "cfba884a.f59e28",
        "type": "ui_switch",
        "z": "732e6ace.9ebb04",
        "name": "magnetometer",
        "label": "magnetometer",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 18,
        "width": "7",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 500,
        "y": 940,
        "wires": [
            [
                "bac99170.378d1"
            ]
        ]
    },
    {
        "id": "2d23a90b.d5b4b6",
        "type": "ui_switch",
        "z": "732e6ace.9ebb04",
        "name": "temperature",
        "label": "temperature",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 20,
        "width": "7",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 490,
        "y": 980,
        "wires": [
            [
                "971af746.38ae78"
            ]
        ]
    },
    {
        "id": "8f349840.974fd8",
        "type": "ui_switch",
        "z": "732e6ace.9ebb04",
        "name": "light",
        "label": "light",
        "tooltip": "",
        "group": "fbe688ce.9f8fb8",
        "order": 22,
        "width": "7",
        "height": "1",
        "passthru": true,
        "decouple": "false",
        "topic": "",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 470,
        "y": 1020,
        "wires": [
            [
                "156b5872.5ae5c8"
            ]
        ]
    },
    {
        "id": "bac99170.378d1",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.sensors.magnetometer",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "971af746.38ae78",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.sensors.temperature",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "156b5872.5ae5c8",
        "type": "change",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "rules": [
            {
                "t": "set",
                "p": "userEntries.deviceConfig.telemetryConfig.sensors.light",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "863ad7de.1643d8",
        "type": "ui_button",
        "z": "732e6ace.9ebb04",
        "name": "save",
        "group": "fbe688ce.9f8fb8",
        "order": 24,
        "width": "10",
        "height": "1",
        "passthru": false,
        "label": "save changes",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "SAVE",
        "payloadType": "str",
        "topic": "",
        "x": 910,
        "y": 760,
        "wires": [
            [
                "4ae0d380.68edbc"
            ]
        ]
    },
    {
        "id": "46577bc9.9b4ee4",
        "type": "ui_button",
        "z": "732e6ace.9ebb04",
        "name": "save & send",
        "group": "fbe688ce.9f8fb8",
        "order": 25,
        "width": "11",
        "height": "1",
        "passthru": false,
        "label": "save & send configuration",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "SEND",
        "payloadType": "str",
        "topic": "",
        "x": 930,
        "y": 800,
        "wires": [
            [
                "4ae0d380.68edbc"
            ]
        ]
    },
    {
        "id": "130983a7.b5959c",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "compose-save",
        "func": "\nlet telemetryConfig = global.get('userEntries.deviceConfig.telemetryConfig');\n\nvar solaceUtils = global.get(\"solaceUtils\");\n\n\nvar timestamp = new Date().toISOString();\nvar exchangeId = solaceUtils.uuid();\n\nvar telemetryConfigMsg = {\n    topic: global.get(\"config.settings.topics.deviceSubs.updateConfigTopics[0]\"),\n    payload: {\n        type: \"telemetry\",\n        timestamp: timestamp,\n        exchangeId: exchangeId,\n        tags: {\n            removeMe: 'soon'\n        }\n    }\n}\n\nvar _merge = global.get(\"_merge\");\n_merge(telemetryConfigMsg.payload, telemetryConfig);\n\nlet sensorArray = [];\n\nfor (const sensor in telemetryConfig.sensors) {\n    if(telemetryConfig.sensors[sensor]) {\n        sensorArray.push(sensor);\n    }\n}\n//node.warn('sensor array = ' + JSON.stringify(sensorArray));\n\ndelete telemetryConfigMsg.payload.sensors;\ntelemetryConfigMsg.payload.sensors = sensorArray;\n\n//save for sending\nflow.set('configMsg', telemetryConfigMsg);\n\n\nreturn telemetryConfigMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1280,
        "y": 720,
        "wires": [
            [
                "81725acc.bda2a8"
            ]
        ]
    },
    {
        "id": "ee6acf76.79d09",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "capture",
        "func": "\nlet button = msg.payload;\n\nlet update = flow.get('userEntries.deviceConfig.telemetryConfig');\n\nlet telemetryConfig = global.get('userEntries.deviceConfig.telemetryConfig') || {};\n\nvar _merge = global.get(\"_merge\");\n_merge(telemetryConfig, update);\n\nglobal.set('userEntries.deviceConfig.telemetryConfig', telemetryConfig );\n\nif(button === 'SEND') {\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1100,
        "y": 720,
        "wires": [
            [
                "130983a7.b5959c"
            ]
        ]
    },
    {
        "id": "b99af8cb.dbfc88",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "clearState",
        "func": "\nflow.set('userEntries.deviceConfig.telemetryConfig', {});\nglobal.set('userEntries.deviceConfig.telemetryConfig', {});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "9ff3c83f.dd2328",
        "type": "inject",
        "z": "732e6ace.9ebb04",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 310,
        "y": 500,
        "wires": [
            [
                "b99af8cb.dbfc88"
            ]
        ]
    },
    {
        "id": "4ae0d380.68edbc",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "validate",
        "func": "let update = flow.get('userEntries.deviceConfig.telemetryConfig');\n\n// check if at least 1 sensor is selected\nlet count = 0;\nfor (const sensor in update.sensors) {\n    if(update.sensors[sensor]) {\n        count++;\n    }\n}\nif(count === 0) {\n    let newMsg = {\n        isValid: false,\n        payload: \"select at least 1 sensor\"\n    }\n    return newMsg;\n}\n\nmsg.isValid = true;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1100,
        "y": 780,
        "wires": [
            [
                "4d8ddf6a.4cc09"
            ]
        ]
    },
    {
        "id": "4d8ddf6a.4cc09",
        "type": "switch",
        "z": "732e6ace.9ebb04",
        "name": "isValid",
        "property": "isValid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1250,
        "y": 780,
        "wires": [
            [
                "ee6acf76.79d09"
            ],
            [
                "40ce3d0d.398814"
            ]
        ]
    },
    {
        "id": "40ce3d0d.398814",
        "type": "ui_toast",
        "z": "732e6ace.9ebb04",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Invalid Configuration",
        "name": "InvalidConfig",
        "x": 1270,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "87b9a0.a5aa466",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "defaults",
        "func": "\nlet telemetryConfig = global.get('userEntries.deviceConfig.telemetryConfig') || {};\n\nif(telemetryConfig.eventFrequencyPerSec === undefined) telemetryConfig.eventFrequencyPerSec = 1;\nif(telemetryConfig.samplesPerEvent === undefined) telemetryConfig.samplesPerEvent = 1;\nif(telemetryConfig.payloadFormat === undefined) telemetryConfig.payloadFormat = 'V1_JSON_VERBOSE';\nif(telemetryConfig.qos === undefined) telemetryConfig.qos = 0;\nif(telemetryConfig.activateAtBootTime === undefined) telemetryConfig.activateAtBootTime = false;\nif(telemetryConfig.apply === undefined) telemetryConfig.apply = 'TRANSIENT';\n\nif(telemetryConfig.sensors === undefined) {\n    telemetryConfig.sensors = {\n        accelerator: false,\n        gyroscope: true,\n        magnetometer: false,\n        temperature: false,\n        light: false\n    };\n}\n\nglobal.set('userEntries.deviceConfig.telemetryConfig', telemetryConfig);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 100,
        "y": 600,
        "wires": [
            [
                "ec9d19cf.214878",
                "9bfa5bc4.e33f68",
                "12c2e08.051902",
                "ea6c6aa8.5677a8",
                "1e3576b5.4594c9",
                "7e167883.d9de38",
                "2d10b7cf.92c9f8",
                "88ea80d2.d980b",
                "d6e7de4c.2ad18",
                "62d979b8.c31c78",
                "67181910.9ba6c8"
            ]
        ]
    },
    {
        "id": "e37dd300.e7e5d",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "defaults",
        "func": "\nlet statusConfig = global.get('userEntries.deviceConfig.statusConfig') || {};\n\nif(statusConfig.sendPeriodicStatus === undefined) statusConfig.sendPeriodicStatus = false;\nif(statusConfig.periodicStatusIntervalSecs === undefined) statusConfig.periodicStatusIntervalSecs = 300;\nif(statusConfig.periodicStatusType === undefined) statusConfig.periodicStatusType = 'SHORT_STATUS';\nif(statusConfig.qos === undefined) statusConfig.qos = 0;\nif(statusConfig.apply === undefined) statusConfig.apply = 'TRANSIENT';\n\nglobal.set('userEntries.deviceConfig.statusConfig', statusConfig);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 120,
        "y": 160,
        "wires": [
            [
                "10bcaacc.6cef15",
                "dbb1a0cb.3247a",
                "9a1ea8be.bfd998",
                "a41bdc8f.b3456",
                "969ff15a.b242d"
            ]
        ]
    },
    {
        "id": "ee83801d.ecd11",
        "type": "function",
        "z": "732e6ace.9ebb04",
        "name": "clearState",
        "func": "\nflow.set('userEntries.deviceConfig.statusConfig', {});\nglobal.set('userEntries.deviceConfig.statusConfig', {});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 540,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8ad090a5.413",
        "type": "inject",
        "z": "732e6ace.9ebb04",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 350,
        "y": 80,
        "wires": [
            [
                "ee83801d.ecd11"
            ]
        ]
    },
    {
        "id": "404a2ba2.a66004",
        "type": "ui_template",
        "z": "a307a629.5ef888",
        "group": "429359bf.c5c138",
        "name": "displayLastStatus",
        "order": 1,
        "width": "21",
        "height": "3",
        "format": "<div>topic: {{msg.topic}} @ <b>{{msg.timestampReceived}}</b></div>\n<div>\n    <pre>{{msg.payload | json}}</pre>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 850,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "4100cd9c.d6aa54",
        "type": "function",
        "z": "a307a629.5ef888",
        "name": "composeLastStatus",
        "func": "\nvar _merge = global.get(\"_merge\");\n\n\nlet timestampReceived = new Date().toISOString();\n\n//descrCode: 23 = short status, 1 message\nif(msg.payload.descrCode === 23) {\n    // statusCode === 0: info\n    let lastStatus = {\n        topic: msg.topic,\n        timestampReceived: timestampReceived,\n        deviceId: msg.payload.deviceId,\n        payload: {}\n    }\n    // add each item object\n    let items = msg.payload.items;\n    for(let i=0; i < items.length; i++) {\n\n        _merge(lastStatus.payload, items[i]);\n        \n    }\n\n    return lastStatus;\n\n} else if(msg.payload.descrCode === 15) {\n    //descrCode: 15 = full status, many parts\n    // statusCode === 0: info\n\n    // get the status from flow context\n    let lastStatus = flow.get('lastStatus') || {};\n    if(lastStatus.payload === undefined) lastStatus.payload = {};\n\n    // add each item object\n    let items = msg.payload.items;\n    for(let i=0; i < items.length; i++) {\n\n        _merge(lastStatus.payload, items[i]);\n    }\n    \n    // send if last part received\n    if(msg.payload.thisPartNumber === msg.payload.totalNumberOfParts) {\n        let update = {\n            topic: msg.topic,\n            deviceId: msg.payload.deviceId,\n            timestampReceived: timestampReceived,\n        }            \n        _merge(lastStatus, update);\n        flow.set('lastStatus', undefined);\n        return lastStatus;\n    } else {\n        flow.set('lastStatus', lastStatus);\n    }\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 940,
        "wires": [
            [
                "404a2ba2.a66004"
            ]
        ]
    },
    {
        "id": "fe19c367.9ea1b",
        "type": "function",
        "z": "b661b75c.e7b738",
        "name": "readAbout",
        "func": "var about=global.get(\"config.about\");\n\nlet newMsg = {\n    payload: about\n}\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 100,
        "wires": [
            [
                "1e3d4002.580e9",
                "a2f3d83f.dacbc8",
                "19640171.0e9bcf",
                "235db0fa.2b603"
            ]
        ]
    },
    {
        "id": "6b5c8180.b4f55",
        "type": "inject",
        "z": "b661b75c.e7b738",
        "name": "start",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.8",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "fe19c367.9ea1b"
            ]
        ]
    },
    {
        "id": "235db0fa.2b603",
        "type": "ui_text",
        "z": "b661b75c.e7b738",
        "group": "a449e70c.3c11a8",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Solace XDK App Version:",
        "format": "{{msg.payload.solaceXDKAppVersion}}",
        "layout": "row-left",
        "x": 610,
        "y": 220,
        "wires": []
    },
    {
        "id": "4e07406b.6ae1c",
        "type": "debug",
        "z": "a307a629.5ef888",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 360,
        "y": 700,
        "wires": []
    },
    {
        "id": "7ba921c8.1053d",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Disable Device Session",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "DISABLE_DEVICE_SESSION",
        "payloadType": "str",
        "topic": "",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "e14e9cd9.1a2e7",
                "f74b84a6.ead498"
            ]
        ]
    },
    {
        "id": "e14e9cd9.1a2e7",
        "type": "change",
        "z": "c50bcf9b.51248",
        "name": "saveButton",
        "rules": [
            {
                "t": "set",
                "p": "button",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 220,
        "wires": [
            [
                "52f2d1c1.e2bbc"
            ]
        ]
    },
    {
        "id": "acb29e4b.d7efa",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "disconnectDevice?",
        "property": "button",
        "propertyType": "flow",
        "rules": [
            {
                "t": "eq",
                "v": "DISCONNECT_DEVICE",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 610,
        "y": 300,
        "wires": [
            [
                "ea36b4f5.dc5008"
            ]
        ]
    },
    {
        "id": "f850f45c.eb6998",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Enable Device Session",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "ENABLE_DEVICE_SESSION",
        "payloadType": "str",
        "topic": "",
        "x": 140,
        "y": 360,
        "wires": [
            [
                "ea36b4f5.dc5008",
                "f74b84a6.ead498"
            ]
        ]
    },
    {
        "id": "1fa57bb0.a0f814",
        "type": "ui_text",
        "z": "c50bcf9b.51248",
        "group": "72439b11.60eaa4",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Session enabled:",
        "format": "{{msg.payload.enabled}}",
        "layout": "row-left",
        "x": 1490,
        "y": 1500,
        "wires": []
    },
    {
        "id": "183f3592.ac4a1a",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "Device Session State",
        "info": "",
        "x": 160,
        "y": 1460,
        "wires": []
    },
    {
        "id": "ae4f4687.131ea8",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "updateSessionEnabled",
        "func": "if(msg.payload.data !== undefined) {\n\n    let update = {\n        enabled: msg.payload.data.enabled\n    }\n    \n    let deviceSessionState = global.get('state.deviceSession') || {};\n    \n    var _merge = global.get(\"_merge\");\n    _merge(deviceSessionState, update);\n    \n    msg.payload = deviceSessionState;\n    \n    global.set('state.deviceSession', deviceSessionState);\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1250,
        "y": 1500,
        "wires": [
            [
                "1fa57bb0.a0f814"
            ]
        ]
    },
    {
        "id": "2fa0157.7c858ea",
        "type": "mqtt in",
        "z": "c50bcf9b.51248",
        "name": "getSessionInfo",
        "topic": "UPDATE/iot-mgmt/device/+/get-session-info",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 140,
        "y": 1500,
        "wires": [
            [
                "f35b3e9f.3ad17"
            ]
        ]
    },
    {
        "id": "d71edacf.200ac8",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "updateDeviceSessionState",
        "func": "\n\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/get-session-info\",\n    payload: {\n        getSessionInfo: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1420,
        "y": 280,
        "wires": [
            [
                "ff5755de.c38cf8"
            ]
        ]
    },
    {
        "id": "ff5755de.c38cf8",
        "type": "mqtt out",
        "z": "c50bcf9b.51248",
        "name": "send",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 1750,
        "y": 320,
        "wires": []
    },
    {
        "id": "f35b3e9f.3ad17",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "deviceIdCheck",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "config.settings.deviceId",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 1500,
        "wires": [
            [
                "4b9fb5bb.55372c"
            ]
        ]
    },
    {
        "id": "f842eab1.7640c8",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "200?",
        "property": "payload.meta.responseCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1050,
        "y": 220,
        "wires": [
            [
                "acb29e4b.d7efa",
                "d71edacf.200ac8"
            ],
            [
                "65312a04.98b9f4"
            ]
        ]
    },
    {
        "id": "2e27b4f1.3f01ac",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "200?",
        "property": "payload.meta.responseCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 360,
        "wires": [
            [
                "d71edacf.200ac8"
            ],
            [
                "65312a04.98b9f4"
            ]
        ]
    },
    {
        "id": "10bb7d95.ffe5a2",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "composeSEMPV2_GetMQTTSession",
        "func": "/*\nGET /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}\n*/  \n\nvar deviceId=global.get(\"config.settings.deviceId\");\n\nvar sempV2=global.get(\"config.solaceBroker.sempV2\");\n\nvar url=sempV2.basePath+\"/msgVpns/\"+sempV2.vpn+\"/mqttSessions/\"+deviceId+\",\"+sempV2.virtualRouter;\n\n// begin test \n//url = url + '-test';\n// end test\n\n\nvar headers = {\n      'Authorization': 'Basic ' + new Buffer(sempV2.user + ':' + sempV2.password).toString('base64')\n}   \n\nvar httpMsg = {\n    headers: headers,\n    method: \"GET\",\n    url: url\n}\n\nreturn httpMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 1580,
        "wires": [
            [
                "a5554e86.0588d"
            ]
        ]
    },
    {
        "id": "7eeb47f7.87d598",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "200?",
        "property": "payload.meta.responseCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 1580,
        "wires": [
            [
                "ae4f4687.131ea8",
                "880807ea.cccb88"
            ],
            [
                "ffe5355b.29cf08"
            ]
        ]
    },
    {
        "id": "a5554e86.0588d",
        "type": "http request",
        "z": "c50bcf9b.51248",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 830,
        "y": 1580,
        "wires": [
            [
                "7eeb47f7.87d598"
            ]
        ]
    },
    {
        "id": "880807ea.cccb88",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "composeSEMPV2_GetMQTTSessionSubscriptions",
        "func": "/*\n#/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions\n\ncurl -X GET \\\n  -u $SEMPV2_USER:$SEMPV2_PASSWORD \\\n  $SEMPV2_BASEPATH/msgVpns/$MESSAGE_VPN/mqttSessions/$XDK_DEVICE_ID,$VIRTUALROUTER/subscriptions\n*/  \n\nvar deviceId=global.get(\"config.settings.deviceId\");\n\nvar sempV2=global.get(\"config.solaceBroker.sempV2\");\n\nvar url=sempV2.basePath+\"/msgVpns/\"+sempV2.vpn+\"/mqttSessions/\"+deviceId+\",\"+sempV2.virtualRouter+\"/subscriptions\";\n\n// begin test\n//url = url + '-test';\n// end test\n\nvar headers = {\n      'Authorization': 'Basic ' + new Buffer(sempV2.user + ':' + sempV2.password).toString('base64')\n}   \n\nvar httpMsg = {\n    headers: headers,\n    method: \"GET\",\n    url: url\n}\n\nreturn httpMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 550,
        "y": 1680,
        "wires": [
            [
                "9f6cbded.2bfdc"
            ]
        ]
    },
    {
        "id": "9f6cbded.2bfdc",
        "type": "http request",
        "z": "c50bcf9b.51248",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 830,
        "y": 1680,
        "wires": [
            [
                "eb14a298.9c5b5"
            ]
        ]
    },
    {
        "id": "eb14a298.9c5b5",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "200?",
        "property": "payload.meta.responseCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 970,
        "y": 1680,
        "wires": [
            [
                "1186b93b.ab0d27"
            ],
            [
                "ffe5355b.29cf08"
            ]
        ]
    },
    {
        "id": "1186b93b.ab0d27",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "updateSessionSubscriptions",
        "func": "if(msg.payload.data !== undefined) {\n\n    let update = {\n        subscriptions: msg.payload.data\n    }\n    \n    let deviceSessionState = global.get('state.deviceSession') || {};\n    \n    deviceSessionState.subscriptions = [];\n    \n    var _merge = global.get(\"_merge\");\n    _merge(deviceSessionState, update);\n    \n    msg.payload = deviceSessionState;\n    \n    global.set('state.deviceSession', deviceSessionState);\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1200,
        "y": 1740,
        "wires": [
            [
                "23005bac.bc1304"
            ]
        ]
    },
    {
        "id": "23005bac.bc1304",
        "type": "ui_template",
        "z": "c50bcf9b.51248",
        "group": "72439b11.60eaa4",
        "name": "displaySubscriptions",
        "order": 3,
        "width": "14",
        "height": "6",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload.subscriptions\">\n    <li>\n        <div>{{x.subscriptionTopic}}, QoS:{{x.subscriptionQos}}</div>\n    </li>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1500,
        "y": 1740,
        "wires": [
            []
        ]
    },
    {
        "id": "2c3f0221.3decee",
        "type": "ui_text",
        "z": "c50bcf9b.51248",
        "group": "72439b11.60eaa4",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Subscriptions",
        "label": "Subscriptions:",
        "format": "",
        "layout": "row-spread",
        "x": 1480,
        "y": 1700,
        "wires": []
    },
    {
        "id": "f43ea96d.c80498",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Get Session Info",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "GET_SESSION_INFO",
        "payloadType": "str",
        "topic": "",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "9a1e3dfc.72ece"
            ]
        ]
    },
    {
        "id": "8ac03a12.8f1dc8",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Delete All Subscriptions",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "DELETE_ALL_SUBSCRIPTION",
        "payloadType": "str",
        "topic": "",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "71eab70a.30e148"
            ]
        ]
    },
    {
        "id": "b071b8a8.0415e8",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "composeSEMPV2_DeleteMQTTSessionSubscription",
        "func": "/*\nTOPIC=\"CREATE/iot-control/BCW/solacebooth/device/command\"\n\nsource $PROJECT_DIR/scripts/commonFunctions.sh.include\nURL_ENCODED_TOPIC=$(urlencode $TOPIC)\n#/msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions/{subscriptionTopic}\n\ncurl -X DELETE \\\n  -u $SEMPV2_USER:$SEMPV2_PASSWORD \\\n  $SEMPV2_BASEPATH/msgVpns/$MESSAGE_VPN/mqttSessions/$XDK_DEVICE_ID,$VIRTUALROUTER/subscriptions/$URL_ENCODED_TOPIC\n\n*/  \n\nvar deviceId=global.get(\"config.settings.deviceId\");\n\nvar sempV2=global.get(\"config.solaceBroker.sempV2\");\n\nvar headers = {\n      'Authorization': 'Basic ' + new Buffer(sempV2.user + ':' + sempV2.password).toString('base64')\n}   \n\nlet encodedTopic = encodeURIComponent(msg.payload.subscriptionTopic);\n\n// test errors\n//encodedTopic = msg.payload.subscriptionTopic;\n// end test errors\n\nvar url=sempV2.basePath+\"/msgVpns/\"+sempV2.vpn+\"/mqttSessions/\"+deviceId+\",\"+sempV2.virtualRouter+\"/subscriptions/\" + encodedTopic;\n\n\nvar httpMsg = {\n    headers: headers,\n    method: \"DELETE\",\n    url: url,\n    requestTimeout: 30000\n}\n\nreturn httpMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 760,
        "y": 720,
        "wires": [
            [
                "9a6c9df5.4520a"
            ]
        ]
    },
    {
        "id": "89a9b6a1.883448",
        "type": "ui_template",
        "z": "475cded7.6c736",
        "group": "987b2ff2.bac02",
        "name": "displayDeviceSubsUpdateConfigTopics",
        "order": 2,
        "width": "14",
        "height": "3",
        "format": "\n\n\n<ol>\n<div ng-repeat=\"x in msg.settings.topics.deviceSubs.updateConfigTopics\">\n    <li>{{x}}</li>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 480,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "4fa06462.58090c",
        "type": "ui_text",
        "z": "475cded7.6c736",
        "group": "987b2ff2.bac02",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device Subscriptions - Command Topics:",
        "format": "",
        "layout": "row-left",
        "x": 480,
        "y": 560,
        "wires": []
    },
    {
        "id": "e1c0bc43.8f96f",
        "type": "ui_template",
        "z": "475cded7.6c736",
        "group": "987b2ff2.bac02",
        "name": "displayDeviceSubsCommandTopics",
        "order": 4,
        "width": "14",
        "height": "3",
        "format": "\n\n\n<ol>\n<div ng-repeat=\"x in msg.settings.topics.deviceSubs.commandTopics\">\n    <li>{{x}}</li>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 470,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5bdd15aa.3379fc",
        "type": "ui_text",
        "z": "475cded7.6c736",
        "group": "987b2ff2.bac02",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Device Publish Topics:",
        "format": "",
        "layout": "row-left",
        "x": 420,
        "y": 640,
        "wires": []
    },
    {
        "id": "682f939d.30a69c",
        "type": "ui_template",
        "z": "475cded7.6c736",
        "group": "987b2ff2.bac02",
        "name": "displayDevicePubTopics",
        "order": 6,
        "width": "14",
        "height": "2",
        "format": "\n\n\n<ol>\n<div ng-repeat=\"x in msg.settings.topics.devicePubs\">\n    <li>{{x}}</li>\n</div>\n</ol>\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 430,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "be5f4bf3.e37e78",
        "type": "ui_button",
        "z": "c50bcf9b.51248",
        "name": "",
        "group": "f01c636a.94e78",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Add All Subscriptions",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "ADD_ALL_SUBSCRIPTION",
        "payloadType": "str",
        "topic": "",
        "x": 160,
        "y": 940,
        "wires": [
            [
                "b7b1ddb9.1ad52"
            ]
        ]
    },
    {
        "id": "463cb780.ce8b38",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "++",
        "func": "\nif ( (msg.i += 1) < msg.items.length ) return msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 760,
        "wires": [
            [
                "ca8d38e8.dce7f8"
            ]
        ]
    },
    {
        "id": "ca8d38e8.dce7f8",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "for each item",
        "func": "if( msg.i     === undefined ) msg.i = 0;\nif( msg.items === undefined ) msg.items = msg.payload;\n\nmsg.payload = msg.items[ msg.i ];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 450,
        "y": 720,
        "wires": [
            [
                "b071b8a8.0415e8",
                "463cb780.ce8b38"
            ]
        ]
    },
    {
        "id": "522a7e97.c8dbd",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "createSubscriptionsArray",
        "func": "\nlet subscriptions = global.get('state.deviceSession.subscriptions');\nlet newMsg = {\n    payload: subscriptions\n}\n\n// remember the number of calls\nflow.set('sempv2.deleteSubscriptions.targetCount', subscriptions.length);\n\nreturn newMsg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 190,
        "y": 720,
        "wires": [
            [
                "7c2db378.1beb1c"
            ]
        ]
    },
    {
        "id": "9a6c9df5.4520a",
        "type": "http request",
        "z": "c50bcf9b.51248",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 1070,
        "y": 720,
        "wires": [
            [
                "df3329a.32f89d8"
            ]
        ]
    },
    {
        "id": "df3329a.32f89d8",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "200?",
        "property": "payload.meta.responseCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 720,
        "wires": [
            [
                "838b6c17.68eb6"
            ],
            [
                "204ee955.e30016",
                "838b6c17.68eb6"
            ]
        ]
    },
    {
        "id": "98d39d1e.cea0f",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "updateDeviceSessionState",
        "func": "\n\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/get-session-info\",\n    payload: {\n        getSessionInfo: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1760,
        "y": 720,
        "wires": [
            [
                "d576bb4f.b99a98"
            ]
        ]
    },
    {
        "id": "7c2db378.1beb1c",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "empty?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 760,
        "wires": [
            [
                "ca8d38e8.dce7f8"
            ],
            [
                "292f912a.09207e"
            ]
        ]
    },
    {
        "id": "85a02547.0f37e8",
        "type": "ui_toast",
        "z": "c50bcf9b.51248",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "isEmpty",
        "x": 580,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "292f912a.09207e",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "usrMsg",
        "func": "msg.topic = \"Session has no subscriptions\";\nmsg.payload = \"Add some first.\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 800,
        "wires": [
            [
                "85a02547.0f37e8"
            ]
        ]
    },
    {
        "id": "8bdf3fd4.548a2",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "createSubscriptionsArray",
        "func": "\nlet deviceSubs = global.get('config.settings.topics.deviceSubs');\n\nlet subscriptions = deviceSubs.updateConfigTopics;\nsubscriptions = subscriptions.concat(deviceSubs.commandTopics);\n\nlet newMsg = {\n    payload: subscriptions\n}\n\n// remember the number of calls\nflow.set('sempv2.addSubscriptions.targetCount', subscriptions.length);\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "x": 190,
        "y": 980,
        "wires": [
            [
                "173731b4.6bef6e"
            ]
        ]
    },
    {
        "id": "173731b4.6bef6e",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "for each item",
        "func": "if( msg.i     === undefined ) msg.i = 0;\nif( msg.items === undefined ) msg.items = msg.payload;\n\nmsg.payload = msg.items[ msg.i ];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 980,
        "wires": [
            [
                "93d6d2fa.8695f",
                "9ba65ab6.42b6a8"
            ]
        ]
    },
    {
        "id": "93d6d2fa.8695f",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "++",
        "func": "\nif ( (msg.i += 1) < msg.items.length ) return msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 430,
        "y": 1020,
        "wires": [
            [
                "173731b4.6bef6e"
            ]
        ]
    },
    {
        "id": "9ba65ab6.42b6a8",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "composeSEMPV2_AddMQTTSessionSubscription",
        "func": "/*\nPOST /msgVpns/{msgVpnName}/mqttSessions/{mqttSessionClientId},{mqttSessionVirtualRouter}/subscriptions\n\nsubscriptionQos \tinteger($int64)\nsubscriptionTopic   string\n\n*/  \n\nvar deviceId=global.get(\"config.settings.deviceId\");\n\nvar sempV2=global.get(\"config.solaceBroker.sempV2\");\n\nvar headers = {\n      'Authorization': 'Basic ' + new Buffer(sempV2.user + ':' + sempV2.password).toString('base64')\n}   \n\nvar url=sempV2.basePath+\"/msgVpns/\"+sempV2.vpn+\"/mqttSessions/\"+deviceId+\",\"+sempV2.virtualRouter+\"/subscriptions\";\n\nvar body = {\n  subscriptionQos: 0,\n  subscriptionTopic: msg.payload\n}\n\nvar httpMsg = {\n    headers: headers,\n    method: \"POST\",\n    url: url,\n    requestTimeout: 30000,\n    payload: body\n}\n\nreturn httpMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 980,
        "wires": [
            [
                "3d86d1e7.c8423e"
            ]
        ]
    },
    {
        "id": "3d86d1e7.c8423e",
        "type": "http request",
        "z": "c50bcf9b.51248",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": false,
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "authType": "",
        "x": 1070,
        "y": 980,
        "wires": [
            [
                "b0656ac4.f1cae8"
            ]
        ]
    },
    {
        "id": "b0656ac4.f1cae8",
        "type": "switch",
        "z": "c50bcf9b.51248",
        "name": "200?",
        "property": "payload.meta.responseCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1210,
        "y": 980,
        "wires": [
            [
                "bba58ee4.7ecae"
            ],
            [
                "cb418c7e.94026",
                "bba58ee4.7ecae"
            ]
        ]
    },
    {
        "id": "55f38bc5.c5f104",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "updateDeviceSessionState",
        "func": "\n\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/get-session-info\",\n    payload: {\n        getSessionInfo: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1780,
        "y": 980,
        "wires": [
            [
                "74792200.0f3f1"
            ]
        ]
    },
    {
        "id": "1f323067.5013b",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "createUsrMsg",
        "func": "\nlet newMsg = {};\n\nif(msg.payload.errorCount > 0) {\n    newMsg.topic = 'Add All Subscriptions - ERROR';\n    newMsg.payload = 'Responses: ' + msg.payload.actualCount + ', errors: ' + msg.payload.errorCount;\n} else {\n    newMsg.topic = 'Add All Subscriptions';\n    newMsg.payload = 'Number of subscriptions added successfully: ' + msg.payload.actualCount;\n}\n\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1740,
        "y": 1060,
        "wires": [
            [
                "b5832e91.ce19"
            ]
        ]
    },
    {
        "id": "cb418c7e.94026",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "add2Log",
        "func": "\nvar log = flow.get('log')|| [];\n\nlet err = {\n    error: msg.payload.meta.error,\n    responseCode: msg.payload.meta.responseCode\n}\nlog.push(err);\n\nflow.set('log', log);\n\nmsg.log = log;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1340,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "a862429a.be645",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "clearLog",
        "func": "\nflow.set('log', undefined);\n\n// send notification to re-display log\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/broker-control/log-change\",\n    payload: {\n        updateLog: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 940,
        "wires": [
            [
                "8bdf3fd4.548a2",
                "d5443919.3cc808"
            ]
        ]
    },
    {
        "id": "bba58ee4.7ecae",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "++ actualCount - finished?",
        "func": "\nlet actualCount = flow.get('sempv2.addSubscriptions.actualCount') || 0;\nflow.set('sempv2.addSubscriptions.actualCount', ++actualCount);\n\nlet targetCount = flow.get('sempv2.addSubscriptions.targetCount');\n\nif(actualCount == targetCount) {\n    // now check for errors\n    let log = flow.get('log') || [];\n    msg.payload = { \n        errorCount: log.length, \n        targetCount: targetCount,\n        actualCount: actualCount\n    };\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1480,
        "y": 980,
        "wires": [
            [
                "7eb2b3af.94854c",
                "1f323067.5013b",
                "55f38bc5.c5f104"
            ]
        ]
    },
    {
        "id": "b5832e91.ce19",
        "type": "ui_toast",
        "z": "c50bcf9b.51248",
        "position": "dialog",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usrMsg",
        "x": 1920,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "7eb2b3af.94854c",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "updateLog",
        "func": "// send notification to re-display log\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/broker-control/log-change\",\n    payload: {\n        updateLog: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1730,
        "y": 1020,
        "wires": [
            [
                "74792200.0f3f1"
            ]
        ]
    },
    {
        "id": "3ecf3afe.4090e6",
        "type": "comment",
        "z": "c50bcf9b.51248",
        "name": "Log",
        "info": "",
        "x": 110,
        "y": 1220,
        "wires": []
    },
    {
        "id": "15910042.d68b9",
        "type": "mqtt in",
        "z": "c50bcf9b.51248",
        "name": "updateLog",
        "topic": "UPDATE/iot-mgmt/device/+/broker-control/log-change",
        "qos": "1",
        "datatype": "json",
        "broker": "62bac859.25e008",
        "x": 120,
        "y": 1260,
        "wires": [
            [
                "690edc1e.433a04"
            ]
        ]
    },
    {
        "id": "690edc1e.433a04",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "getLog",
        "func": "\nvar log = flow.get('log');\n\nif(log !== undefined) {\n    \n    msg.payload = log;\n    \n} else {\n    \n    msg.payload = undefined;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 520,
        "y": 1260,
        "wires": [
            [
                "59acaed.83b4a5"
            ]
        ]
    },
    {
        "id": "e52ba08e.9144b",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "start",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 130,
        "y": 1320,
        "wires": [
            [
                "6d37c3be.6c9b2c"
            ]
        ]
    },
    {
        "id": "6d37c3be.6c9b2c",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "clearLog",
        "func": "\nflow.set('log', undefined);\n\n// send notification to re-display log\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/broker-control/log-change\",\n    payload: {\n        updateLog: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 280,
        "y": 1320,
        "wires": [
            [
                "690edc1e.433a04"
            ]
        ]
    },
    {
        "id": "74792200.0f3f1",
        "type": "mqtt out",
        "z": "c50bcf9b.51248",
        "name": "send",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 2010,
        "y": 1000,
        "wires": []
    },
    {
        "id": "d5443919.3cc808",
        "type": "mqtt out",
        "z": "c50bcf9b.51248",
        "name": "send",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 670,
        "y": 940,
        "wires": []
    },
    {
        "id": "59acaed.83b4a5",
        "type": "ui_template",
        "z": "c50bcf9b.51248",
        "group": "450bb1b5.12d1b",
        "name": "displayLog",
        "order": 1,
        "width": "21",
        "height": "3",
        "format": "<ol>\n<div ng-repeat=\"x in msg.payload\">\n    <div>\n        <pre>{{x | json}}</pre>\n    </div>\n</div>\n</ol>\n\n",
        "storeOutMessages": false,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 670,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "b7b1ddb9.1ad52",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "clearState",
        "func": "\nflow.set('sempv2.addSubscriptions.actualCount', undefined);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 940,
        "wires": [
            [
                "a862429a.be645"
            ]
        ]
    },
    {
        "id": "71eab70a.30e148",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "clearState",
        "func": "\nflow.set('sempv2.deleteSubscriptions.actualCount', undefined);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 680,
        "wires": [
            [
                "47db3e98.a8b67"
            ]
        ]
    },
    {
        "id": "47db3e98.a8b67",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "clearLog",
        "func": "\nflow.set('log', undefined);\n\n// send notification to re-display log\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/broker-control/log-change\",\n    payload: {\n        updateLog: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 680,
        "wires": [
            [
                "13d2e16f.40960f",
                "522a7e97.c8dbd"
            ]
        ]
    },
    {
        "id": "13d2e16f.40960f",
        "type": "mqtt out",
        "z": "c50bcf9b.51248",
        "name": "send",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 630,
        "y": 680,
        "wires": []
    },
    {
        "id": "d576bb4f.b99a98",
        "type": "mqtt out",
        "z": "c50bcf9b.51248",
        "name": "send",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 2070,
        "y": 740,
        "wires": []
    },
    {
        "id": "204ee955.e30016",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "add2Log",
        "func": "\nvar log = flow.get('log')|| [];\n\nlet err = {\n    error: msg.payload.meta.error,\n    responseCode: msg.payload.meta.responseCode\n}\nlog.push(err);\n\nflow.set('log', log);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1400,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "838b6c17.68eb6",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "++ actualCount - finished?",
        "func": "\nlet actualCount = flow.get('sempv2.deleteSubscriptions.actualCount') || 0;\nflow.set('sempv2.deleteSubscriptions.actualCount', ++actualCount);\n\nlet targetCount = flow.get('sempv2.deleteSubscriptions.targetCount');\n\nif(actualCount == targetCount) {\n    // now check for errors\n    let log = flow.get('log') || [];\n    msg.payload = { \n        errorCount: log.length, \n        targetCount: targetCount,\n        actualCount: actualCount\n    };\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 1460,
        "y": 720,
        "wires": [
            [
                "f9911294.1a69e",
                "ebdf48a.79ddcb8",
                "98d39d1e.cea0f"
            ]
        ]
    },
    {
        "id": "f9911294.1a69e",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "updateLog",
        "func": "// send notification to re-display log\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/broker-control/log-change\",\n    payload: {\n        updateLog: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1710,
        "y": 760,
        "wires": [
            [
                "d576bb4f.b99a98"
            ]
        ]
    },
    {
        "id": "ebdf48a.79ddcb8",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "createUsrMsg",
        "func": "\nlet newMsg = {};\n\nif(msg.payload.errorCount > 0) {\n    newMsg.topic = 'Delete All Subscriptions - ERROR';\n    newMsg.payload = 'Responses: ' + msg.payload.actualCount + ', errors: ' + msg.payload.errorCount;\n} else {\n    newMsg.topic = 'Delete All Subscriptions';\n    newMsg.payload = 'Number of subscriptions deleted successfully: ' + msg.payload.actualCount;\n}\n\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1720,
        "y": 800,
        "wires": [
            [
                "51a89fda.a9cd8"
            ]
        ]
    },
    {
        "id": "51a89fda.a9cd8",
        "type": "ui_toast",
        "z": "c50bcf9b.51248",
        "position": "dialog",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usrMsg",
        "x": 1900,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "9a1e3dfc.72ece",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "clearState",
        "func": "\nflow.set('sempv2.getSessionInfo.actualCount', undefined);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 80,
        "wires": [
            [
                "8ad0e117.2222d"
            ]
        ]
    },
    {
        "id": "8ad0e117.2222d",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "clearLog",
        "func": "\nflow.set('log', undefined);\n\n// send notification to re-display log\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/broker-control/log-change\",\n    payload: {\n        updateLog: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 480,
        "y": 80,
        "wires": [
            [
                "1e24ccf2.58fcb3",
                "1eb4c465.b314cc"
            ]
        ]
    },
    {
        "id": "1e24ccf2.58fcb3",
        "type": "mqtt out",
        "z": "c50bcf9b.51248",
        "name": "send",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 910,
        "y": 140,
        "wires": []
    },
    {
        "id": "1eb4c465.b314cc",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "getSessionInfo",
        "func": "\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/get-session-info\",\n    payload: {\n        getSessionInfo: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 700,
        "y": 80,
        "wires": [
            [
                "1e24ccf2.58fcb3"
            ]
        ]
    },
    {
        "id": "4b9fb5bb.55372c",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "clearState",
        "func": "\nflow.set('sempv2.getSessionInfo.actualCount', undefined);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 500,
        "y": 1500,
        "wires": [
            [
                "10bb7d95.ffe5a2"
            ]
        ]
    },
    {
        "id": "ffe5355b.29cf08",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "add2Log",
        "func": "\nvar log = flow.get('log')|| [];\n\nlet err = {\n    error: msg.payload.meta.error,\n    responseCode: msg.payload.meta.responseCode\n}\nlog.push(err);\n\nflow.set('log', log);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1180,
        "y": 1620,
        "wires": [
            [
                "7ba74f5b.254d3",
                "a39aad.cf84055"
            ]
        ]
    },
    {
        "id": "7ba74f5b.254d3",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "updateLog",
        "func": "// send notification to re-display log\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/broker-control/log-change\",\n    payload: {\n        updateLog: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1350,
        "y": 1600,
        "wires": [
            [
                "8ea59270.5fd17"
            ]
        ]
    },
    {
        "id": "8ea59270.5fd17",
        "type": "mqtt out",
        "z": "c50bcf9b.51248",
        "name": "send",
        "topic": "",
        "qos": "1",
        "retain": "",
        "broker": "62bac859.25e008",
        "x": 1510,
        "y": 1600,
        "wires": []
    },
    {
        "id": "a39aad.cf84055",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "createUsrMsg",
        "func": "\nlet newMsg = {};\n\nnewMsg.topic = 'Get Session Info - ERROR';\nnewMsg.payload = 'check the log';\n\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1360,
        "y": 1640,
        "wires": [
            [
                "37aab5df.973bea"
            ]
        ]
    },
    {
        "id": "37aab5df.973bea",
        "type": "ui_toast",
        "z": "c50bcf9b.51248",
        "position": "dialog",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usrMsg",
        "x": 1540,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "44b3e4f2.214a8c",
        "type": "inject",
        "z": "c50bcf9b.51248",
        "name": "start",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 350,
        "y": 1540,
        "wires": [
            [
                "4b9fb5bb.55372c"
            ]
        ]
    },
    {
        "id": "f74b84a6.ead498",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "clearLog",
        "func": "\nflow.set('log', undefined);\n\n// send notification to re-display log\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/broker-control/log-change\",\n    payload: {\n        updateLog: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 160,
        "wires": [
            [
                "1e24ccf2.58fcb3"
            ]
        ]
    },
    {
        "id": "65312a04.98b9f4",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "add2Log",
        "func": "\nvar log = flow.get('log')|| [];\n\nlet err = {\n    error: msg.payload.meta.error,\n    responseCode: msg.payload.meta.responseCode\n}\nlog.push(err);\n\nflow.set('log', log);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1360,
        "y": 340,
        "wires": [
            [
                "5cacdfe6.9e3db",
                "5f9dc9e1.22a608"
            ]
        ]
    },
    {
        "id": "5cacdfe6.9e3db",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "updateLog",
        "func": "// send notification to re-display log\nlet deviceId = global.get('config.settings.deviceId');\nlet newMsg = {\n    topic: \"UPDATE/iot-mgmt/device/\" + deviceId + \"/broker-control/log-change\",\n    payload: {\n        updateLog: true\n    }\n}   \nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1530,
        "y": 340,
        "wires": [
            [
                "ff5755de.c38cf8"
            ]
        ]
    },
    {
        "id": "5f9dc9e1.22a608",
        "type": "function",
        "z": "c50bcf9b.51248",
        "name": "createUsrMsg",
        "func": "\n\nlet newMsg = {};\n\nnewMsg.topic = 'ERROR';\nnewMsg.payload = 'check the log';\n\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 1540,
        "y": 380,
        "wires": [
            [
                "110fb99.4d7c746"
            ]
        ]
    },
    {
        "id": "110fb99.4d7c746",
        "type": "ui_toast",
        "z": "c50bcf9b.51248",
        "position": "dialog",
        "displayTime": "30",
        "highlight": "red",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "usrMsg",
        "x": 1740,
        "y": 380,
        "wires": [
            []
        ]
    }
]